head	1.3;
access;
symbols;
locks
	saclib:1.3; strict;
comment	@ * @;


1.3
date	94.08.21.12.09.51;	author George;	state spec;
branches;
next	1.2;

1.2
date	93.05.17.12.45.07;	author George;	state bug;
branches;
next	1.1;

1.1
date	93.05.17.12.35.43;	author saclib;	state init;
branches;
next	;


desc
@Quotient and remainder.
@


1.3
log
@GAMMA integer was replaced by C integer.
@
text
@/*===========================================================================
			       QREM(a,b; q,r)

Quotient and remainder.

Inputs
  a, b : C integers, b non-zero.

Outputs
  q    : integral part of a / b.
  r    : a - b * q.
===========================================================================*/
#include "saclib.h"

void QREM(a,b, q_,r_)
       Word a,b, *q_,*r_;
{
       Word q,r;

Step1: /* Compute q. */
       if (a == 0)
	  q = 0;
       else if (a > 0) {
	  if (b > 0)
	     q = a / b;
	  else
	     q = -(a / -b); }
       else {
	  if (b > 0)
	     q = -(-a / b);
	  else 
	     q = -a / -b; }

Step2: /* Compute r. */
       r = a - q * b;
       
Return: /* Prepare for return. */
       *q_ = q;
       *r_ = r;
       return;
}
@


1.2
log
@This correction ensures that the integer quotient produced is
the integral part of the exact quotient in the absence of an
ANSI C standard to guarantee this for negative operands.  The
specification of QREM previously incorrectly specified that the 
integer quotient produced was the floor of the exact quotient,
instead of the integral part of it.
@
text
@d1 2
a2 2
/*==========================================================================
                      QREM(a,b; q,r)
d7 1
a7 1
  a, b : gamma-integers, b non-zero.
d12 1
a12 1
==========================================================================*/
d22 1
a22 1
	 q = 0;
d24 9
a32 10
	 if (b > 0)
	   q = a / b;
	 else
	   q = -(a / -b);
       } else {
	 if (b > 0)
	   q = -(-a / b);
	 else 
	   q = -a / -b;
       }
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
/*======================================================================
<macro>                  QREM(a,b; q,r)
d4 1
a4 1
Quotient and remainder.  
d10 1
a10 1
  q    : floor(a/b).
d12 1
a12 2
======================================================================*/
#define NO_SACLIB_MACROS
a18 1
       /* hide algorithm */
d20 18
a37 4
Step1: /* Compute. */
       q = a / b;
       r = REM(a,b);

@
