head	1.3;
access;
symbols;
locks
	saclib:1.3; strict;
comment	@ * @;


1.3
date	98.05.18.22.44.04;	author George;	state algo;
branches;
next	1.2;

1.2
date	96.10.22.18.40.21;	author George;	state bug;
branches;
next	1.1;

1.1
date	96.10.22.18.39.37;	author George;	state init;
branches;
next	;


desc
@Matrix of modular polynomials determinant, modular algorithm.
@


1.3
log
@This new version has been made faster by changing the
way in which ASSPR is used in computing a degree bound for the
determinant.
@
text
@/*======================================================================
                      D <- MMPDMA (r,p,M)

Matrix of modular polynomials determinant, modular algorithm.

Inputs
   r : a non-negative BETA-integer.
   p : a prime BETA-integer.
   M : a square matrix over Z/(p)[x_1,...,x_r].

Outputs
   D : the determinant of M, an element of Z/(p)[x_1,...,x_r].
======================================================================*/
#include "saclib.h"

Word MMPDMA(r,p,M)
        Word r,p,M;
{
       Word a,b,B,bp,d,D,Ds,M1,M11,Mp,Ms,n,N,N1,N11,X,rp;

Step1: /* Matrix of order 1. */
        if (RED(M) == NIL) {
           D = FIRST(FIRST(M));
           goto Return; }

Step2: /* r=0. */
        if (r == 0) {
           D = MMDDET(p,M);
           goto Return; }

Step3: /* Compute degree bound. */
        n = LENGTH(M);
        Mp = M;
        N = NIL;
        do {
           ADV(Mp,&M1,&Mp);
           N1 = NIL;
           do {
              ADV(M1,&M11,&M1);
              if (M11 != 0)
                 N11 = PDEGSV(r,M11,1);
              else
                 N11 = - (BETA / n);
              N1 = COMP(N11,N1); }
           while (M1 != NIL);
           N = COMP(N1,N); }
        while (Mp != NIL);
        ASSPR(N,&X,&d);

Step4: /* Apply evaluation and interpolation. */
        a = 0;
        rp = r - 1;
        B = PINV(0,1,1);
        D = 0;
        do {
           if (a == p)
              FAIL("MMPDMA","Elements of finite field exhausted",r,p,M);
           Ms = MMPEV(r,p,M,1,a);
           Ds = MMPDMA(rp,p,Ms);
           b = MPEMV(1,p,B,a);
           bp = MDINV(p,b);
           D = MPINT(p,B,a,bp,r,D,Ds);
           X = LIST4(1,1,0,MDNEG(p,a));
           B = MPPROD(1,p,B,X);
           a = a + 1; }
        while (PDEG(B) <= d);

Return: /* Return D. */
        return(D);
}
@


1.2
log
@The fix for MMPDMA.c consists of just inserting the line
"D = 0;", properly indented, between lines 58 and 59.
Prior to this correction MPINT was being called in line
67 with the input D undefined only during the first
execution of the do-loop, and in this case the input B
is always a polynomial of degree 0 and MMPDMA was producing
the correct output without ever utilizing the value of D.
@
text
@d2 1
a2 1
                      D <- MMPDMA(r,p,M)
d7 3
a9 3
  r : a BETA-integer, r >= 0.
  p : a BETA-integer, prime. 
  M : a square matrix over Z/(p)[X1,...,Xr].
d12 1
a12 1
  D : in Z/(p)[X1,...,Xr], the determinant of M.
d17 1
a17 1
       Word r,p,M;
d19 1
a19 2
       Word B,D,Ds,M1,M11,Mp,Ms,N,N1,N11,X,a,b,bp,d,rp;
       /* hide M1,M11,Mp,N11,a,b,bp,rp; */
d22 3
a24 5
       if (RED(M) == NIL)
         {
         D = FIRST(FIRST(M));
         goto Return;
         }
d27 3
a29 5
       if (r == 0)
         {
         D = MMDDET(p,M);
         goto Return;
         }
d32 17
a48 17
       Mp = M;
       N = NIL;
       do
         {
         ADV(Mp,&M1,&Mp);
         N1 = NIL;
         do
           {
           ADV(M1,&M11,&M1);
           N11 = PDEGSV(r,M11,1);
           N1 = COMP(N11,N1);
           }
         while (M1 != NIL);
         N = COMP(N1,N);
         }
       while (Mp != NIL);
       ASSPR(N,&X,&d);
d51 16
a66 18
       a = 0;
       rp = r - 1;
       B = PINV(0,1,1);
       D = 0;
       do
         {
         if (a == p)
           FAIL("MMPDMA","Elements of finite field exhausted",r,p,M);
         Ms = MMPEV(r,p,M,1,a);
         Ds = MMPDMA(rp,p,Ms);
         b = MPEMV(1,p,B,a);
         bp = MDINV(p,b);
         D = MPINT(p,B,a,bp,r,D,Ds);
         X = LIST4(1,1,0,MDNEG(p,a));
         B = MPPROD(1,p,B,X);
         a = a + 1;
         }
       while (PDEG(B) <= d);
d68 2
a69 2
Return: /* Prepare for return. */
       return(D);
@


1.1
log
@Initial revision
@
text
@d59 1
@
