head	1.4;
access;
symbols;
locks
	saclib:1.4; strict;
comment	@ * @;


1.4
date	96.10.21.14.13.38;	author Chris;	state typo;
branches;
next	1.3;

1.3
date	95.06.17.16.31.13;	author George;	state bug;
branches;
next	1.2;

1.2
date	94.10.13.23.00.36;	author Jeremy;	state bug;
branches;
next	1.1;

1.1
date	94.10.13.22.56.36;	author saclib;	state init;
branches;
next	;


desc
@Integral polynomial power of 2 product.
@


1.4
log
@An extraneous if statement had been retained when it ought to have
been deleted in a previous revision.
@
text
@/*===========================================================================
			     C <- IPP2P(r,B,m)

Integral polynomial power of 2 product.  

Inputs
  r : a BETA-digit, r >= 0, the number of variables.
  m : a non-negative integer.
  B : an element of Z[x_1,...,x_r].  

Outputs
  C : an element of Z[x_1...,x_r].  C=(2^m)B.
===========================================================================*/
#include "saclib.h"

Word IPP2P(r,B,m)
       Word r,B,m;
{
       Word C;
       Word Bp,b,c,e,rp;

Step1: /* r = 0 or m = 0 or B = 0. */
       if (r == 0) {
	  C = ITRUNC(B,-m);
	  goto Return; }
       if (m == 0) {
	  C = B;
	  goto Return; }
       if (B == 0) {
	  C = 0;
	  goto Return; }

Step2: /* General case. */
       Bp = B;
       C = NIL;
       rp = r - 1;
       do {
	  ADV2(Bp,&e,&b,&Bp);
	  if (rp == 0)
	     c = ITRUNC(b,-m);
	  else
	     c = IPP2P(rp,m,b);
	  C = COMP2(c,e,C); }
       while (Bp != NIL);
       C = INV(C);

Return: /* Prepare for return. */
       return(C);
}
@


1.3
log
@I have discovered and corrected a bug in IPP2P.  The bug was that
the program modified its input variable m, causing the program
to crash whenever r > 2.  The saclib copy should be corrected by
making the following changes to Step2.

(1)  Delete the line "m = -m;".

(2)  In the line "c = ITRUNC(b,m);" change m to -m.

(3)  In the line "c = IPP2P(rp,-m,b);: change -m to m.

George
@
text
@a25 3
       if (r == 0) {
	  C = ITRUNC(b,-m);
	  goto Return; }
@


1.2
log
@In Step1,
	C = ITRUNC(b,-m);
was changed to
	C = ITRUNC(B,-m);

The recursive call
	c = IPP2P(rp,m,b);
was changed to
	c = IPP2P(rp,-m,b);


The confusion comes from the specs for ITRUNC.  I have changed this program
to use IMP2.  The problem wasn't noticed since IPP2P is only used in
the univariate IPBHTMV which is called from AMUPBHT, and AMUPBHT calls
IPBHTMV in a situation where the bugs do not occur.
@
text
@a39 1
       m = -m;
d43 1
a43 1
	     c = ITRUNC(b,m);
d45 1
a45 1
	     c = IPP2P(rp,-m,b);
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
/*======================================================================
                      C <- IPP2P(r,B,m)
d9 1
a9 1
  B : an element of Z[X1,...,Xr].  
d12 2
a13 2
  C : an element of Z[X1...,Xr].  C=(2^m)B.
======================================================================*/
d22 13
a34 16
Step1: /* r=0 or m=0 or B=0. */
       if (r == 0)
         {
         C = ITRUNC(b,-m);
         goto Return;
         }
       if (m == 0)
         {
         C = B;
         goto Return;
         }
       if (B == 0)
         {
         C = 0;
         goto Return;
         }
d41 8
a48 10
       do
         {
         ADV2(Bp,&e,&b,&Bp);
         if (rp == 0)
           c = ITRUNC(b,m);
         else
           c = IPP2P(rp,m,b);
         C = COMP2(c,e,C);
         }
       while (!(Bp == NIL));
a49 1
       goto Return;
d51 1
a51 1
Return:
@
