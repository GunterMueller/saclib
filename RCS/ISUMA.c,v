head	1.3;
access;
symbols;
locks
	saclib:1.3; strict;
comment	@ * @;


1.3
date	93.12.13.19.46.25;	author Werner;	state del;
branches;
next	1.2;

1.2
date	93.11.07.16.52.20;	author Mark;	state bug;
branches;
next	1.1;

1.1
date	93.11.07.11.35.12;	author Werner;	state new;
branches;
next	;


desc
@Integer sum - array representation.
@


1.3
log
@This function has been removed from the library.
@
text
@[ removed from library ]
/*===========================================================================
			      ISUMA(m,A,B,C,t)

Integer sum - array representation.

Inputs
  m      :  a positive BETA-digit.
  A,B,C  :  arrays of length m.  A and B contain integers A' and B',
            not both negative.

Outputs
  t      :  t is the high-order bit of A' + B'.

Effect   :  The m low-order digits of A' + B' are produced in C.
===========================================================================*/
#include "saclib.h"

void ISUMA(m,A,B,C,t_)
       Word m,*A,*B,*C,*t_;
{
       Word c,cp,i,j,s,t;

Step1: /* Compute leading zeros and sign of result. */
       t = 0;
       i = m - 1;
       while (i >= 0) {
	  C[i] = A[i] + B[i];
	  if (C[i] != 0)
	     break;
	  i = i - 1; }
       s = SIGN(C[i]);
       if (s == 0)
	  goto Return;
       if (s < 0)
	  goto Step3;

Step2: /* Compute remaining digits of positive sum. */
       cp = 0;
       for (j = 0; j <= i; j++) {
	  c = A[j] + B[j] + cp;
	  if (c < 0) {
	     c = c + BETA;
	     cp = -1; }
	  else if (c >= BETA) {
	     c = c - BETA;
	     cp = 1; }
	  else
	     cp = 0;
	  C[j] = c; }
       if (i < m - 1)
	  C[i + 1] = cp;
       else
	  t = cp;
       goto Return;

Step3: /* Compute remaining digits of negative sum. */
       cp = 0;
       for (j = 0; j <= i; j++) {
	  c = A[j] + B[j] + cp;
	  if (c > 0) {
	     c = c - BETA;
	     cp = 1; }
	  else
	     cp = 0;
	  C[j] = c; }

Return: /* Prepare for return. */
        *t_ = t;
        return;
}
@


1.2
log
@The BDigit declarations were changed to Word since BDigit caused problems
with isac.
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d19 1
a19 3
       BDigit m;
       Word *A,*B,*C;
       BDigit *t_;
d21 1
a21 2
       BDigit cp,i,j,s,t;
       Word c;
@
