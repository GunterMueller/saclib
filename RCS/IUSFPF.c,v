head	1.3;
access;
symbols;
locks
	saclib:1.3; strict;
comment	@ * @;


1.3
date	95.08.11.09.29.54;	author Mark;	state algo;
branches;
next	1.2;

1.2
date	93.11.29.01.15.54;	author Mark;	state algo;
branches;
next	1.1;

1.1
date	93.06.14.17.21.47;	author Mark;	state init;
branches;
next	;


desc
@Integral univariate squarefree polynomial factorization.
@


1.3
log
@Major algorithm changes including early factor detection.
@
text
@/*===========================================================================
			 L <- IUSFPF(A)

Integral univariate squarefree polynomial factorization.

Inputs
  A : in Z[x], A squarefree, positive, primitive, and of positive degree.

Outputs
  L : a list (a_1,...,a_k), with a_i in Z[X], of the positive, irreducible
      factors of A.
===========================================================================*/
#include "saclib.h"

Word IUSFPF(A)
       Word A;
{
       Word C,F,G,L,p;

Step1: /* Degree 1. */
       if (PDEG(A) == 1) { 
	  L = LIST1(A);
	  goto Return; }

Step2: /* Degree 2. */
       if (PDEG(A) == 2) { 
	  L = IUSFPF2(A); 
	  goto Return; }

Step3: /* Compute modular factorization. */
       IUSFPMF(A,&p,&F,&C,&G);
       if (p == 0) {
	  L = LIST1(A);
	  goto Return; }

Step5: /* Apply binary lifting with early factor detection. */
       L = IUPHLEFD(p,F,A,C,G);

Return: /* Prepare for return. */
       return(L);
}
@


1.2
log
@Introduced special handling for degree 2.
(I must have forgotten to check this in when it was changed; the date
 of this change should be the same as that of rev 1.2 of IUPFAC.c.)
@
text
@d2 1
a2 1
			       L <- IUSFPF(A)
d7 1
a7 1
  A : in Z[X], A squarefree, positive, primitive, and of positive degree.
d10 1
a10 1
  L : a list (a1,...,ak), with ai in Z[X], the positive irreducible
d18 1
a18 1
       Word A1,C,F,G,G1,Gs,L,M,P,a,b,h,m1,n,n1,p;
d21 3
a23 4
       n = PDEG(A); 
       if (n == 1) { 
	 L = LIST1(A);
	 goto Return; }
d26 6
a31 7
       if (n == 2) { 
	 L = IUSFPF2(A); 
	 goto Return; }

Step3: /* Compute distinct degree factorization f for suitable prime
          p, and a factor degree set C. */
       IUPFDS(A,&p,&F,&C);
d33 2
a34 28
         L = LIST1(A);
         goto Return; }

Step4: /* Factor distinct degree factors. */
       G = NIL;
       do {
         ADV(F,&P,&F);
         FIRST2(P,&n1,&A1);
         m1 = PDEG(A1);
         if (n1 == m1)
           G = COMP(A1,G);
         else {
           G1 = MUPFBL(p,A1);
           G = CONC(G1,G); } }
       while (F != NIL);

Step5: /* Compute coefficient bound. */
       a = PLDCF(A);
       h = IPSUMN(1,A);
       n = PDEG(A);
       b = IPROD(a,h);
       b = IMP2(b,n);
       M = p;
       while (ICOMP(M,b) <= 0)
         M = IDPR(M,p);

Step6: /* Apply Hensel construction. */
       Gs = IUPQHL(p,G,M,A);
d36 2
a37 2
Step7: /* Combine lifted factors. */
       L = IPFLC(1,M,NIL,A,Gs,C);
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
/*======================================================================
                      L <- IUSFPF(A)
d12 1
a12 1
======================================================================*/
a18 1
       /* hide a,m1,n,n1,p; */
d20 12
a31 1
Step1: /* Compute distinct degree factorization f for suitable prime
d34 1
a34 2
       if (p == 0)
         {
d36 1
a36 2
         goto Return;
         }
d38 1
a38 1
Step2: /* Factor distinct degree factors. */
d40 1
a40 2
       do
         {
d46 1
a46 2
         else
           {
d48 2
a49 4
           G = CONC(G1,G);
           }
         }
       while (!(F == NIL));
d51 1
a51 1
Step3: /* Compute coefficient bound. */
d61 1
a61 1
Step4: /* Apply Hensel construction. */
d64 1
a64 1
Step5: /* Combine lifted factors. */
@
