head	1.2;
access;
symbols;
locks
	saclib:1.2; strict;
comment	@ * @;


1.2
date	94.08.21.12.27.12;	author George;	state spec;
branches;
next	1.1;

1.1
date	94.08.21.12.18.15;	author saclib;	state init;
branches;
next	;


desc
@Integral polynomial binary homothetic transformation, main variable.
@


1.2
log
@GAMMA integer was replaced by C integer.
@
text
@/*===========================================================================
			    B <- IPBHTMV(r,A,k)

Integral polynomial binary homothetic transformation, main variable.

Inputs
  r : a BETA-digit.  r >= 0.
  A : an element of Z[x_1,...,x_r].
  k : a Beta-digit.

Outputs
  B : an element of Z[x_1,...,x_r].  
      If k >= 0 then B(x_1,...,x_r) = A(x_1,...,2^k x_r).
      If k < 0 then B(x_1,...,x_r) = 2^{-km}A(x_1,...,2^k x_r), 
      where m = deg(A).
===========================================================================*/
#include "saclib.h"

Word IPBHTMV(r,A,k)

       Word r,A,k;
{
       Word B;
       Word Ap,a,b,e,h,m,rp;

Step1: /* A = 0. */
       if (A == 0) {
	  B = 0;
	  goto Return; }

Step2: /* r = 1. */
       if (r == 1) {
	  B = IUPBHT(A,k);
	  goto Return; }

Step3: /* r > 1. */
       Ap = A;
       rp = r - 1;
       m = PDEG(A);
       B = NIL;
       if (k >= 0)
	  h = 0;
       else
	  h = m * k;
       while (Ap != NIL) {
	  ADV2(Ap,&e,&a,&Ap);
	  b = IPP2P(rp,a,k * e - h);
	  B = COMP2(b,e,B); }
       B = INV(B);

Return: /* Prepare for return. */
       return(B);
}
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
/*======================================================================
                       B <- IPBHTMV(r,A,k)
d7 3
a9 3
  r : A BETA-digit.  r >= 0.
  A : an element of Z[X1,...,Xr].
  k : gamma-integer.
d12 3
a14 3
  B : an element of Z[X1,...,Xr].  
      If k >= 0 then B(X1,...,Xr) = A(X1,...,2^kXr).
      If k < 0 then B(X1,...,Xr) = 2^{-km}A(X1,...,2^kXr), 
d16 1
a16 1
======================================================================*/
d26 9
a34 13
Step1: /*[A=0.]*/
       if (A == 0)
         {
         B = 0;
         goto Return;
         }

Step2: /* r=1. */
       if (r == 1)
         {
         B = IUPBHT(A,k);
         goto Return;
         }
d36 1
a36 1
Step3: /* r>1. */
d42 1
a42 1
         h = 0;
d44 5
a48 7
         h = m * k;
       while (Ap != NIL)
         {
         ADV2(Ap,&e,&a,&Ap);
         b = IPP2P(rp,a,k * e - h);
         B = COMP2(b,e,B);
         }
d51 1
a51 1
Return:
@
