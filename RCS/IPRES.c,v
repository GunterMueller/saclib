head	1.6;
access;
symbols;
locks
	saclib:1.6; strict;
comment	@ * @;


1.6
date	2000.03.09.19.15.10;	author George;	state bug;
branches;
next	1.5;

1.5
date	99.03.25.20.27.06;	author George;	state bug;
branches;
next	1.4;

1.4
date	99.03.21.19.26.31;	author George;	state algo;
branches;
next	1.3;

1.3
date	98.11.16.14.45.36;	author George;	state embe;
branches;
next	1.2;

1.2
date	95.07.14.11.42.05;	author Mark;	state embe;
branches;
next	1.1;

1.1
date	95.07.14.11.41.21;	author saclib;	state init;
branches;
next	;


desc
@Integral polynomial resultant.
@


1.6
log
@In Step3, after the line "Mp = AMLM(M,k,k);", inserted the
line "FREEMATRIX(M,k);".
@
text
@/*======================================================================
                      C <- IPRES(r,A,B)

Integral polynomial resultant.

Inputs
   r   : a BETA-digit, r > 0.
   A,B : in Z[x_1,...,x_r].  A and B have positive degrees in x_r.

Output
  C : in Z[x_1,...,x_{r-1}], the resultant of A and B with respect
      to x_r.

Algorithm
   The modular algorithm is used.  Degree bounds for the resultant
   are computed using ASSPR (which solves optimal assignment problems).
======================================================================*/
#include "saclib.h"

Word IPRES(r,A,B)
	BDigit r;
        Word A,B;
{
	BDigit d1,i,k,**M,m,n,p,q,rp;
        Word As,Bs,C,Cs,D,L,Mp,P,Q,d,e,f;

	BDigit j,T;

Step1: /* Compute a coefficient bound. */
        d = IPSUMN(r,A);
        e = IPSUMN(r,B);
	m = PDEG(A);
        n = PDEG(B);
        f = IPROD(IEXP(d,n),IEXP(e,m));
        f = IDPR(f,2);

Step2: /* Check for a common divisor x_i, 1 <= i <= r. */
	for (i = r; i >= 1; i--) {
           if (PDVAR(r,A,i) == 1 && PDVAR(r,B,i) == 1) {
              C = 0;
              goto Return; } }

Step3: /* Compute degree bounds. */
	D = NIL;
	k = m + n;
	for (i = r - 1; i >= 1; i--) {
	   M = SMDM(r,A,B,i);
	   Mp = AMLM(M,k,k);
	   FREEMATRIX(M,k);
	   ASSPR(Mp,&P,&d1);
	   D = COMP(d1,D); }

Step4: /* Initialize loop. */
        L = LPRIME;
        Q = 1;
        C = 0;
        rp = r - 1;

Step5: /* Compute the resultant modulo several primes and
	apply the Chinese remainder algorithm. */

        while (ICOMP(Q,f) <= 0) {
	   if (L == NIL)
	      FAIL("IPRES","Prime list exhausted");
           ADV(L,&p,&L);
           As = MPHOM(r,p,A);
	   Bs = MPHOM(r,p,B);
           if (PDEG(As) == m && PDEG(Bs) == n) {
              Cs = MPRESDB(r,p,As,Bs,D);
              q = MDHOM(p,Q);
              q = MDINV(p,q);
              C = IPCRA(Q,p,q,rp,C,Cs);
              Q = IPROD(Q,p); } }

Return: /* Return C. */
       return(C);
}
@


1.5
log
@Inserted Step 2.
@
text
@d49 1
@


1.4
log
@The algorithm was changed to obtain better degree bounds by
using ASSPR, which solves optimal assignment problems.
@
text
@d37 7
a43 1
Step2: /* Compute degree bounds. */
d52 1
a52 1
Step3: /* Initialize loop. */
d58 1
a58 1
Step4: /* Compute the resultant modulo several primes and
@


1.3
log
@Takes advantage of some new subroutines.
@
text
@d8 1
a8 1
   A,B : in Z[x_1,...,x_r], A and B have positive degrees in x_r.
d13 4
d24 2
a25 2
	BDigit m,n,p,q,rp;
        Word As,Bs,C,Cs,L,Q,d,e,f;
d27 2
d37 10
a46 1
Step2: /* Initialize. */
d52 1
a52 1
Step3: /* Compute the resultant modulo several primes and
d62 1
a62 1
              Cs = MPRES(r,p,As,Bs);
@


1.2
log
@Changed PRIME to LPRIME.
@
text
@d7 2
a8 3
   r : a BETA-digit, r > 0.
 A,B : in Z[X1,...,Xr], A and B are of positive degree in the main
      variable.
d10 3
a12 3
Outputs
  C : in Z[X1,...,X_{r-1}], the resultant of A and B with respect to
      the main variable.
d17 2
a18 1
       Word r,A,B;
d20 2
a21 1
       Word As,Bs,C,Cs,I,Q,d,e,f,m,n,p,q,rp;
d23 7
a29 11
Step1: /* Compute coefficient bound. */
       d = IPMAXN(r,A);
       e = IPMAXN(r,B);
       m = PDEG(A);
       n = PDEG(B);
       d = IEXP(d,n);
       e = IEXP(e,m);
       f = IFACTL(m + n);
       f = IPROD(e,f);
       f = IPROD(d,f);
       f = IDPR(f,2);
d32 4
a35 4
       I = LPRIME;
       Q = 1;
       C = 0;
       rp = r - 1;
d37 2
a38 14
Step3: /* Loop. */
       while (I != NIL) {
         ADV(I,&p,&I);
         As = MPHOM(r,p,A);
         if (PDEG(As) == m) {
           Bs = MPHOM(r,p,B);
           if (PDEG(Bs) == n) {
             Cs = MPRES(r,p,As,Bs);
             q = MDHOM(p,Q);
             q = MDINV(p,q);
             C = IPCRA(Q,p,q,rp,C,Cs);
             Q = IPROD(Q,p);
             if (ICOMP(Q,f) >= 0)
               goto Return; } } }
d40 12
a51 2
Step4: /* Algorithm fails. */
       FAIL("IPRES","Prime list exhausted",r,A,B,f,Q);
d53 1
a53 1
Return: /* Prepare for return. */
@


1.1
log
@Initial revision
@
text
@d35 1
a35 1
       I = PRIME;
@
