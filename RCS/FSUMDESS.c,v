head	1.5;
access;
symbols;
locks
	saclib:1.5; strict;
comment	@ * @;


1.5
date	2000.05.22.18.38.58;	author George;	state algo;
branches;
next	1.4;

1.4
date	2000.04.18.15.39.41;	author George;	state algo;
branches;
next	1.3;

1.3
date	2000.04.14.15.03.18;	author Werner;	state aalgo;
branches;
next	1.2;

1.2
date	2000.01.08.19.25.23;	author George;	state algo;
branches;
next	1.1;

1.1
date	2000.01.02.16.13.43;	author George;	state init;
branches;
next	;


desc
@Floating-point sum, different exponents, same signs.
@


1.5
log
@Corrected rounding to nearest and reorganized the program to
make it more readable.
@
text
@/*======================================================================
                        FSUMDESS(A,B,d,C)

Floating-point sum, different exponents, same signs.

Inputs

   A, B : two floating-point numbers having the same precisions,
          different exponents, and the same signs.
   d :    a sign (rounding direction).
   C :    an array large enough for the sum.

Output
   C :    a floating-point number approximating the sum of A and B,
          rounded according to IEEE standards.
======================================================================*/
#include "saclib.h"

void FSUMDESS(A,B,d,C)
        Word *A,*B,*C;
        BDigit d;
{
	BDigit a,ap,c,cb,f,i,j,p,q,r,rp,t,u;
	Word *Ap,*Bp;

Step1: /* Let A' be the input with the larger exponent, B' the other. */
	if (A[0] >= B[0]) {
	   Ap = A;
	   Bp = B; }
	else {
	   Ap = B;
	   Bp = A; }

Step2: /* Store the exponent, sign and precision of C. */
	C[0] = Ap[0];
	C[1] = Ap[1];
	C[2] = Ap[2];
	p = Ap[2];

Step3: /* Determine the denormalizing shift amount. */
	q = 0;
	r = Ap[0] - Bp[0];
	while (r >= ZETA) {
	   q = q + 1;
	   r = r - ZETA; }
	rp = ZETA - r;

Step4: /* Add mantissas, case q = 0. */
	if (q > 0)
	   goto Step5;
	cb = Ap[p+2] + (Bp[p+2] >> r);
        if (cb >= BETA) {
	   C[0] = C[0] + 1;
	   t = 1;
           if (p == 1) {
              C[3] = cb >> 1;
              ap = cb & 1; }
           else {
              a = Ap[3] + ((Bp[3] >> r) | ((Bp[4] << rp) & BETA1));
              ap = a & 1;
              for (i = 4; i <= p+1; i++) {
                 c = a >> ZETA;
                 f = a & BETA1;
                 a = Ap[i] + ((Bp[i] >> r) | ((Bp[i+1] << rp) & BETA1)) + c;
                 C[i-1] = (f>>1) | ((a & 1) << (ZETA-1)); }
              c = a >> ZETA;
              f = a & BETA1;
              a = cb + c;
              C[p+1] = (f>>1) | ((a & 1) << (ZETA-1));
              C[p+2] = a >> 1; } }
	else { 	/* (cb < BETA) */
	   t = 0;
	   ap = 0;
	   c = 0;
	   for (i = 3; i <= p + 1; i++) {
              a = (Bp[i] >> r) | ((Bp[i+1] << rp) & BETA1);
              a = Ap[i] + a + c;
              C[i] = a & BETA1;
              c = a >> ZETA; }
           a = cb + c;
           C[p+2] = a & BETA1;
	   if (a >= BETA)
	      goto Step7; }
	goto Step8;

Step5: /* Add mantissas, case 0 < q < p. */
	if (q >= p)
	   goto Step6;
	c = 0;
	for (i = q + 3; i <= p + 1; i++) {
            a = (Bp[i] >> r) | ((Bp[i+1] << rp) & BETA1);
            a = Ap[i-q] + a + c;
            C[i-q] = a & BETA1;
            c = a >> ZETA; }
        a = (Bp[p+2] >> r) + Ap[p-q+2] + c;
        C[p-q+2] = a & BETA1;
        c = a >> ZETA;
	for (i = p - q + 3; i <= p + 2; i++) {
           a = Ap[i] + c;
           C[i] = a & BETA1;
           c = a >> ZETA; }
	if (c == 1)
	   goto Step7;
	goto Step8;

Step6: /* Add mantissas, case q >= p. */
        for (i = 3; i <= p + 2; i++)
           C[i] = Ap[i];
        t = 0;
        ap = 0;
	goto Step8;

Step7: /* Denormalizing right shift. */
	t = 1;
	ap = 1;
        for (i = p + 2; i >= 3; i--) {
           a = C[i];
           C[i] = (a >> 1) | (ap << (ZETA - 1));
           ap = a & 1; }
        C[0] = C[0] + 1;

Step8: /* Rounding decision, case d /= 0 . */

/*  Now t = 1 if a normalizing right shift occurred and otherwise
t = 0.  If t = 1 then a' is the bit that was right-shifted out of
the low-order position of the sum. */
	
	if (d == 0)
	   goto Step9;
	if (d != C[1])
	   return;
	if (q >= p)
	   goto Step12;
	if (t == 1 && ap == 1)
	   goto Step12;
	if (r != 0) {
	   u = (Bp[q+3] << rp) & BETA1;
	   j = q + 2; }
	else {
	   u = Bp[q + 2];
	   j = q + 1; }
	if (u != 0)
	   goto Step12;
	for (i = j; i >= 3; i--)
	   if (Bp[i] != 0)
	      goto Step12;
	return;

Step9: /* Rounding decision, case d = 0, t = 0 and q >= p. */
	if (t == 1)
	   goto Step11;
	if (q < p)
	   goto Step10;
	if (q > p || r > 0)
	   return;
	if (Bp[p+2] != BETA2)
	   goto Step12;
	if ((C[3] & 1) == 0)
	   return;
	goto Step12;

Step10: /* Rounding decision, case d = 0, t = 0 and q < p. */
	if (r != 0) {
           u = (Bp[q+3] << rp) & BETA1;
           j = q + 2; }
        else {
           u = Bp[q + 2];
           j = q + 1; }
	if (u < BETA2)
	   return;
	if (u > BETA2)
	   goto Step12;
	for (i = j; i >= 3; i--)
	   if (Bp[i] != 0)
	      goto Step12;
	if ((C[3] & 1) == 0)
	   return;
	goto Step12;

Step11: /* Rounding decision, case d = 0 and t = 1. */
	if (ap == 0)
	   return;
	if (r != 0) {
           u = (Bp[q+3] << rp) & BETA1;
           j = q + 2; }
        else {
           u = Bp[q + 2];
           j = q + 1; }
	if (u != 0)
	   goto Step12;
	for (i = j; i >= 3; i--)
           if (Bp[i] != 0)
              goto Step12;
        if ((C[3] & 1) == 0)
           return;

Step12: /* Round by adding 1. */
	for (i = 3; i <= p + 2; i++) {
           C[i] = C[i] + 1;
           if (C[i] != BETA)
              return;
           C[i] = 0; }
        C[p+2] = BETA2;
        C[0] = C[0] + 1;
	return;
}
@


1.4
log
@Removed the extraneous statement "t = C[3] & 1;" from Step4
and removed the variable t from the BDigit declaration
preceding Step1.
@
text
@d23 1
a23 1
	BDigit a,ap,c,cb,e,f,i,p,q,r,rp,u;
d34 1
a34 1
Step2: /* Store exponent, sign and precision. */
a37 3

Step2a: /* Initialize carry, precision. */
	c = 0;
d40 7
a46 9
Step3: /* Determine input shift amount. */
	e = Ap[0] - Bp[0];
	if (e < ZETA) {
	  q = 0;
	  r = e; }
	else {
	  q = e / ZETA;
	  r = e - q * ZETA; }
        rp = ZETA - r;
d48 37
a84 5
Step3_2: /* No adding? */
	if (q >= p) {
	  for (i = 3; i <= p + 2; i++)
	    C[i] = Ap[i];
	  goto Step4; }
d86 13
a98 43
Step3_3: /* Add mantissas. */
	if (q == 0) {
	  cb = Ap[p+2] + (Bp[p+2] >> r);
	  if (cb > BETA1) {
	    if (p == 1) {
	      C[3] = cb >> 1;
	      ap = cb & 1; }
	    else {
	      a = Ap[3] + ((Bp[3] >> r) | ((Bp[4] << rp) & BETA1));
	      ap = a & 1;
	      for (i = 4; i <= p+1; i++) {
		c = a >> ZETA;
		f = a & BETA1;
		a = Ap[i] + ((Bp[i] >> r) | ((Bp[i+1] << rp) & BETA1)) + c;
		C[i-1] = (f>>1) | ((a & 1) << (ZETA-1)); }
	      c = a >> ZETA;
	      f = a & BETA1;
	      a = cb + c;
	      C[p+1] = (f>>1) | ((a & 1) << (ZETA-1));
	      C[p+2] = a >> 1; }
	    C[0] = C[0] + 1;
	    goto Step5; }
	  else {
	    for (i = 3; i <= p + 1; i++) {
	      a = (Bp[i] >> r) | ((Bp[i+1] << rp) & BETA1);
	      a = Ap[i] + a + c;
	      C[i] = a & BETA1;
	      c = a >> ZETA; }
	    a = cb + c;
	    C[p+2] = a & BETA1;
	    c = a >> ZETA; } }
	else {
	  for (i = q + 3; i <= p + 1; i++) {
	    a = (Bp[i] >> r) | ((Bp[i+1] << rp) & BETA1);
	    a = Ap[i-q] + a + c;
	    C[i-q] = a & BETA1;
	    c = a >> ZETA; }
	  a = (Bp[p+2] >> r) + Ap[p-q+2] + c;
	  C[p-q+2] = a & BETA1;
	  c = a >> ZETA; }

Step3_4: /* Propagate carry and copy. */
        for (i = p - q + 3; i <= p + 2; i++) {
d102 3
d106 9
a114 4
Step4: /* Shift right if needed. */
	if (c == 0) {
	   ap = 0;
	   goto Step5; }
d116 5
a120 5
	for (i = p + 2; i >= 3; i--) {
	   a = C[i];
	   C[i] = (a >> 1) | (ap << (ZETA - 1));
	   ap = a & 1; }
	C[0] = C[0] + 1;
d122 6
a127 1
Step5: /* Rounding decision, case d /= 0. */
d129 1
a129 1
	   goto Step6;
d131 8
a138 1
	   goto Return;
d140 8
a147 8
	   if (ap != 0 || q >= p)
	      goto Step9;
	   if ( ((Bp[q+3] << rp) & BETA1) != 0)
	      goto Step9;
	   for (i = q + 2; i >= 3; i--)
	      if (Bp[i] != 0)
	         goto Step9;
	   goto Return; }
d149 3
a151 3
Step6: /* Rounding decision, case d = 0, c = 0 and q >= p. */
	if (c == 1)
	   goto Step8;
d153 8
a160 12
	   goto Step7;
        if (q > p || r > 0)
           goto Return;
        if (Bp[p+2] != BETA2)
           goto Step9;
        for (i = p + 1; i >= 3; i--)
           if (Bp[i] != 0)
              goto Step9;
        if ((C[3] & 1) == 0)
           goto Return;
        else
           goto Step9;
d162 17
a178 13
Step7: /* Rounding decision, case d = 0, c = 0 and q < p. */
        u = (Bp[q+3] << rp) & BETA1;
        if (u < BETA2)
           goto Return;
        if (u > BETA2)
           goto Step9;
        for (i = q + 2; i >= 3; i--)
           if (Bp[i] != 0)
              goto Step9;
        if ((C[3] & 1) != 0)
           goto Step9;
        else
           goto Return;
d180 12
a191 7
Step8: /* Rounding decision, case d = 0 and c = 1. */
        if (ap == 0)
           goto Return;
        u = (Bp[q+3] << rp) & BETA2;
        if (u != 0)
           goto Step9;
        for (i = q + 2; i >= 3; i--)
d193 3
a195 5
              goto Step9;
        if ((C[3] & 1) != 0)
           goto Step9;
        else
           goto Return;
d197 1
a197 1
Step9: /* Round up. */
d199 6
a204 8
	   C[i] = C[i] + 1;
	   if (C[i] != BETA)
	      goto Return;
	   C[i] = 0; }
	C[p+2] = BETA2;
	C[0] = C[0] + 1;

Return: /* Return. */
@


1.3
log
@Conversion to one-pass method.
@
text
@d23 1
a23 1
	BDigit a,ap,c,cb,e,f,i,p,q,r,rp,t,u;
a109 1
	t = C[3] & 1;
@


1.2
log
@Eliminated a division and multiplication.
@
text
@d20 1
a20 1
        Word *A,*B;
a21 1
	Word *C;
d23 1
a23 1
	BDigit a,ap,c,e,i,p,q,r,rp,t,u;
d39 1
a39 1
Step3: /* Add Mantissas. */
d42 2
d45 6
a50 5
	q = 0;
        r = e;
        while (r >= ZETA) {
           q = q + 1;
           r = r - ZETA; }
d52 2
d55 3
a57 15
	   for (i = 3; i <= p + 2; i++)
	      C[i] = Ap[i];
	   goto Step4; }
	for (i = q + 3; i <= p + 1; i++) {
	   a = (Bp[i] >> r) | ((Bp[i+1] << rp) & BETA1);
	   a = Ap[i-q] + a + c;
	   C[i-q] = a & BETA1;
	   c = a >> ZETA; }
	a = (Bp[p+2] >> r) + Ap[p-q+2] + c;
	C[p-q+2] = a & BETA1;
	c = a >> ZETA;
	for (i = p - q + 3; i <= p + 2; i++) {
	   a = Ap[i] + c;
	   C[i] = a & BETA1;
	   c = a >> ZETA; }
d59 47
@


1.1
log
@Initial revision
@
text
@d17 1
a17 1
#include "floats.h"
d20 1
a20 1
        Word *A,*B,*C;
d22 1
d44 5
a48 2
	q = e / ZETA;
	r = e - q * ZETA;
@
