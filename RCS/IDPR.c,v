head	1.2;
access;
symbols;
locks
	saclib:1.2; strict;
comment	@ * @;


1.2
date	94.04.04.22.57.37;	author George/Nam;	state algo;
branches;
next	1.1;

1.1
date	94.04.04.22.39.21;	author saclib;	state init;
branches;
next	;


desc
@Integer-digit product.
@


1.2
log
@*** empty log message ***
@
text
@/*===========================================================================
			       C <- IDPR(A,b)

Integer-digit product.

Inputs
  A  : in Z.
  b  : BETA-digit.

Outputs
  C  : the product of A and b.
===========================================================================*/
#include "saclib.h"

Word IDPR(A,b)
       Word A,b;
{
       Word  Ap,C,Cp,Cpp,a,c,cp,e,f,s,t;

Step1: /* A or b zero. */
       if (A == 0 || b == 0) {
	  C = 0;
	  goto Return; }

Step2: /* A single-precision. */
       if (A < BETA) {
	  DPR(A,b,&e,&f);
	  if (e == 0)
	     C = f;
	  else
	     C = LIST2(f,e); 
	  goto Return; }

Step3: /* Determine signs of inputs. */
       s = ISIGNF(A);
       t = signm(b);

Step4: /* Initialize and branch on signs. */
       if (AVAIL == NIL) 
	  GC();
       C = AVAIL;
       Cpp = C;  
       Ap = A;
       if (s != t)
	  goto Step6;

Step5: /* Positive product. */
       cp = 0;
       do {
	  Cp = Cpp;
	  a = FIRST(Ap);
	  Ap = RED(Ap); 
	  DPR(a,b,&e,&f);
	  c = f + cp;
	  cp = e;
	  if (c >= BETA) {
	     c = c - BETA;
	     cp = cp + 1; }
	  SFIRST(Cp,c);
	  Cpp = RED(Cp); 
	  if (Cpp == NIL) {
	     AVAIL = NIL;
	     GC();
	     Cpp = AVAIL; 
	     SRED(Cp,Cpp); } }
       while (Ap != NIL);
       if (cp != 0) {
	  SFIRST(Cpp,cp);
	  AVAIL = RED(Cpp);
	  SRED(Cpp,NIL);}
       else {
	  AVAIL = Cpp;
	  SRED(Cp,NIL);}
       goto Return; 

Step6: /* Negative product. */
       cp = 0;
       do {
	  Cp = Cpp;
	  a = FIRST(Ap);
	  Ap = RED(Ap); 
	  DPR(a,b,&e,&f);
	  c = f + cp;
	  cp = e;
	  if (c <= -BETA) {
	     c = c + BETA;
	     cp = cp - 1; }
	  SFIRST(Cp,c);
	  Cpp = RED(Cp); 
	  if (Cpp == NIL) {
	     AVAIL = NIL;
	     GC();
	     Cpp = AVAIL; 
	     SRED(Cp,Cpp); } }
       while (Ap != NIL);
       if (cp != 0) {
	  SFIRST(Cpp,cp);
	  AVAIL = RED(Cpp);
	  SRED(Cpp,NIL);}
       else {
	  AVAIL = Cpp;
	  SRED(Cp,NIL);}

Return: /* Prepare for return. */
       return(C);
}
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
/*======================================================================
                      C <- IDPR(A,b)
d12 1
a12 1
======================================================================*/
d18 1
a18 2
       Word Ap,C,a,c,cp,e,f;
       /* hide Ap,a,c,cp,e,f; */
d21 3
a23 5
       if (A == 0 || b == 0)
         {
         C = 0;
         goto Return;
         }
d26 49
a74 9
       if (A < BETA)
         {
         DPR(A,b,&e,&f);
         if (e == 0)
           C = f;
         else
           C = LIST2(f,e);
         goto Return;
         }
d76 1
a76 3
Step3: /* A multiple-precision. */
       Ap = A;
       C = NIL;
d78 25
a102 23
       do
         {
         ADV(Ap,&a,&Ap);
         DPR(a,b,&e,&f);
         c = f + cp;
         cp = e;
         if (c >= BETA)
           {
           c = c - BETA;
           cp = cp + 1;
           }
         else
           if (c <= -BETA)
             {
             c = c + BETA;
             cp = cp - 1;
             }
         C = COMP(c,C);
         }
       while (!(Ap == NIL));
       if (cp != 0)
         C = COMP(cp,C);
       C = INV(C);
@
