head	1.2;
access;
symbols;
locks
	saclib:1.2; strict;
comment	@ * @;


1.2
date	94.03.06.16.02.49;	author Hoon;	state bug;
branches;
next	1.1;

1.1
date	94.03.06.15.58.50;	author saclib;	state init;
branches;
next	;


desc
@Garbage collection, system independent.
@


1.2
log
@In Step4, the for loop termination condition
	a != EACSTACK
was changed to
	a <= EACSTACK
@
text
@/*===========================================================================
                      GCSI(s,EACSTACK)

Garbage collection, system independent.

Inputs
  s : a BETA-digit, the size in bytes at which data is aligned on the
      stack.
  EACSTACK : a C pointer, the address of the last element on the stack.

Side effects
  Active variables are marked. Then a new available cell list is formed from
  the unmarked cells and the marks are removed.  If GCM = 1 a report is
  written out. If the number of reclaimed cells is no more than NU / RHO
  then a message is written and a failure occurs.
===========================================================================*/
#include "saclib.h"

void GCSI(s,EACSTACK)
       Word s;
       char *EACSTACK;
{
       Word I,L,N,N1,Np,Np1,T,T1,c,**i,j,inc;
       char *a;
       GCArray *v;

Step1: /* Setup. */
       if (GCM == 1) {
	  SWRITE("\nThe "); GWRITE(GCC+1); 
	  SWRITE("--th garbage collection..."); }
       T1 = CLOCK();

Step2: /* Mark the cells in the GCGLOBALS list. */
       L = GCGLOBALS; 
       while (L != NIL) {
	  I = RED(L);
	  SRED(L,-I);
	  L = I; }

Step3: /* Mark the global variables. */
       L = GCGLOBALS; 
       while (L != NIL) {
	  c = *((Word *)FIRST(L));
	  if ((ISLIST(c) || ISGCA(c)) && !ISNIL(c))  MARK(c);
	  L = -RED(L); }

Step4: /* Mark the cells accessible from the system stack. */
       if (((BACSTACK - EACSTACK) % s) != 0)
	  FAIL("GCSI (marking stack)","Alignment error",BACSTACK,EACSTACK);
       if (EACSTACK > BACSTACK)
	  inc = s;
       else
	  inc = -s;
       for (a = BACSTACK; a <= EACSTACK; a += inc) {
	  c =  *((Word *) a);
	  if ((ISLIST(c) || ISGCA(c)) && !ISNIL(c))  MARK(c); }

Step5: /* Unmark the cells in the AVAIL and GCAAVAIL lists. */
       for (L=AVAIL,N1=0; L!=NIL; L=RED(L),N1++)
	  if (RED(L) <= -BETA)  
	     SRED(L,-RED(L)); 
       for (L=GCAAVAIL,Np1=0; L!=NIL; L=GCASPACEBp[L].next,Np1++)
	  if (GCASPACEBp[L].next <= -BETA)
	     GCASPACEBp[L].next = -GCASPACEBp[L].next;

Step6: /* Reclaim unmarked cells */
       AVAIL = NIL;
       N = 0;
       for (L = BETA+NU-1; L > BETA; L -= 2) {
	  if (RED(L) > 0) {
	     SRED(L,AVAIL);
	     SFIRST(L,0);
	     AVAIL = L;
	     N++; }
	  else
	     SRED(L,-RED(L)); }
       GCAAVAIL = NIL;
       Np = 0;
       for (I = BETApp-1; I > BETAp; I--) {
	  if (GCASPACEBp[I].next > 0) {
	     GCAFREE(I);
	     Np++; }
	  else
	     GCASPACEBp[I].next = -GCASPACEBp[I].next; }

Step7: /* Increment counters. */
       T = CLOCK() - T1;
       TAU = TAU + T;
       GCC = GCC + 1;
       GCCC = GCCC + N - N1;
       GCAC = GCAC + Np - Np1;
  
Step8: /* Optional report. */
       if (GCM == 1 || N <= NU / RHO) {
	  SWRITE("\n** ");
	  GWRITE(N); SWRITE(" cells, ");
	  GWRITE(Np); SWRITE(" arrays in ");
	  GWRITE(T); SWRITE(" milliseconds.\n"); }

Step9: /* Too few cells or arrays? */
       if (N <= NU / RHO)
	  FAIL("GCSI (final check)","Too few cells reclaimed.",N,NU,RHO);
       if (Np == 0)
	  FAIL("GCSI (final check)","No arrays reclaimed.",N,NU,RHO);

Return: /* Prepare for return. */
       return;
}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*======================================================================
d7 2
a8 2
         s : a BETA-digit, the size in bytes at which data is aligned on the
             stack.
d12 5
a16 6
  Active variables are marked. Then a new available cell list is formed
  from the unmarked cells and the marks are removed.
  If GCM=1 a report is written out. If the number of reclaimed cells
  is no more than NU / RHO  then a message is written and a failure
  occurs.
======================================================================*/
a25 1
       /* hide I,L,N,N1,Np,Np1,T,T1,c,i,j,inc,a,v; */
d29 2
a30 3
         SWRITE("\nThe "); GWRITE(GCC+1); 
         SWRITE("--th garbage collection....");
       }
d36 3
a38 4
	 I = RED(L);
	 SRED(L,-I);
	 L = I;
       }
d43 3
a45 4
         c = *((Word *)FIRST(L));
	 if ((ISLIST(c) || ISGCA(c)) && !ISNIL(c))  MARK(c);
	 L = -RED(L);
       }
d49 1
a49 1
         FAIL("GCSI (marking stack)","Alignment error",BACSTACK,EACSTACK);
d51 1
a51 1
         inc = s;
d53 4
a56 5
         inc = -s;
       for (a = BACSTACK; a != EACSTACK; a += inc) {
         c =  *((Word *) a);
	 if ((ISLIST(c) || ISGCA(c)) && !ISNIL(c))  MARK(c);
       }
d60 2
a61 2
	 if (RED(L) <= -BETA)  
           SRED(L,-RED(L)); 
d63 2
a64 2
	 if (GCASPACEBp[L].next <= -BETA)
	   GCASPACEBp[L].next = -GCASPACEBp[L].next;
d70 7
a76 9
         if (RED(L) > 0) {
           SRED(L,AVAIL);
	   SFIRST(L,0);
           AVAIL = L;
           N++;
         }
         else
           SRED(L,-RED(L));
       }
d80 5
a84 7
         if (GCASPACEBp[I].next > 0) {
           GCAFREE(I);
           Np++;
         }
         else
           GCASPACEBp[I].next = -GCASPACEBp[I].next;
       }
d95 4
a98 5
         SWRITE("\n** ");
         GWRITE(N); SWRITE(" cells, ");
         GWRITE(Np); SWRITE(" arrays in ");
         GWRITE(T); SWRITE(" milliseconds.\n");
       }
d102 1
a102 1
         FAIL("GCSI (final check)","Too few cells reclaimed.",N,NU,RHO);
d104 1
a104 1
         FAIL("GCSI (final check)","No arrays reclaimed.",N,NU,RHO);
a108 5





@
