head	1.4;
access;
symbols;
locks
	saclib:1.4; strict;
comment	@ * @;


1.4
date	94.09.18.12.31.23;	author Mark;	state new;
branches;
next	1.3;

1.3
date	93.12.13.19.37.36;	author Werner;	state del;
branches;
next	1.2;

1.2
date	93.11.07.16.43.27;	author Mark;	state bug;
branches;
next	1.1;

1.1
date	93.11.07.11.34.47;	author Werner;	state new;
branches;
next	;


desc
@Integer difference - array representation.
@


1.4
log
@Integer difference, array version.
@
text
@/*===========================================================================
			    IDIFA(A,m,B,n; k)

Integer difference, array version.

Inputs
  A, B: in Z, in array representation.  The array for A should be large
        enough to hold A - B.
  m, n: BETA digits, the lengths of A and B, respectively.

Output
  k : the length of A - B.

Side effects
  A - B is computed and put in A.
===========================================================================*/
#include "saclib.h"

void IDIFA(A,m,B,n, k_)
       Word *A,m,*B,n, *k_;
{
       Word c,d,i,k,r,s,t;

Step1: /* A or B zero. */
       if (ISIGNA(A,m) == 0) {
	  for (i = 0; i < n; i++)
	     A[i] = -B[i];
	  k = n;
	  goto Return; }
       if (ISIGNA(B,n) == 0) {
	  k = m;
	  goto Return; }

Step2: /* Determine signs of inputs. */
       s = ISIGNA(A,m);
       t = ISIGNA(B,n);

Step3: /* Initialize and branch on signs. */
       if (s == t)
	  goto Step6;
       else if (s < 0)
	  goto Step5;

Step4: /* A positive and B negative. */
       k = minm(m,n);
       c = 0;
       for (i = 0; i < k; i++) {
	  d = A[i] - B[i] + c;
	  if (d >= BETA) {
	     d -= BETA;
	     c = 1; }
	  else
	     c = 0;
	  A[i] = d; }
       if (m == n) {
	  if (c == 1) {
	     A[m] = 1;
	     k = m + 1; } }
       else if (m > n) {
	  while (i < m && c == 1) {
	     d = A[i] + c;
	     if (d == BETA) {
		d = 0;
		c = 1; }
	     else
		c = 0;
	     A[i] = d;
	     i++; }
	  if (c == 1) {
	     A[m] = 1;
	     k = m + 1; }
	  else
	     k = m; }
       else if (m < n) {
	  while (i < n) {
	     d = c - B[i];
	     if (d == BETA) {
		d = 0;
		c = 1; }
	     else
		c = 0;
	     A[i] = d;
	     i++; }
	  if (c == 1) {
	     A[n] = 1;
	     k = n + 1; }
	  else
	     k = n; }
       goto Return;

Step5: /* A negative and B positive. */
       k = minm(m,n);
       c = 0;
       for (i = 0; i < k; i++) {
	  d = A[i] - B[i] + c;
	  if (d <= -BETA) {
	     d += BETA;
	     c = -1; }
	  else
	     c = 0;
	  A[i] = d; }
       if (m == n) {
	  if (c == -1) {
	     A[m] = -1;
	     k = m + 1; } }
       else if (m > n) {
	  while (i < m && c == -1) {
	     d = A[i] + c;
	     if (d == -BETA) {
		A[i] = 0;
		c = -1; }
	     else
		c = 0;
	     A[i] = d;
	     i++; }
	  if (c == -1) {
	     A[m] = -1;
	     k = m + 1; }
	  else
	     k = m; }
       else if (m < n) {
	  while (i < n) {
	     d = c - B[i];
	     if (d == -BETA) {
		d = 0;
		c = -1; }
	     else
		c = 0;
	     A[i] = d;
	     i++; }
	  if (c == -1) {
	     A[n] = -1;
	     k = n + 1; }
	  else
	     k = n; }
       goto Return;

Step6: /* Same signs. */

       /* Determine sign r of A - B. */
       if (m == n) {
	  i = m;
	  do {
	     i--;
	     d = A[i] - B[i]; }
	  while (d == 0 && i > 0);
	  if (d == 0) {
	     A[0] = 0;
	     k = 0;
	     goto Return; }
	  else
	     r = SIGN(d); }
       else
	  if (m < n)
	     r = -t;
	  else
	     r = s;

       /* Compute difference. */
       k = minm(m,n);
       c = 0;
       if (r > 0)
	  for (i = 0; i < k; i++) {
	     d = A[i] - B[i] + c;
	     if (d < 0) {
		d += BETA;
		c = -1; }
	     else
		c = 0;
	     A[i] = d; }
       else
	  for (i = 0; i < k; i++) {
	     d = A[i] - B[i] + c;
	     if (d > 0) {
		d -= BETA;
		c = 1; }
	     else
		c = 0;
	     A[i] = d; }
       if (m > n) {
	  A[i] += c;
	  i++; }
       else if (m < n) {
	  A[i] = -B[i] + c;
	  i++;
	  while (i < n) {
	     A[i] = -B[i];
	     i++; } }
       i--;
       while (A[i] == 0)
	  i--;
       k = i + 1;

Return: /* Prepare for return. */
       *k_ = k;
       return;
}
@


1.3
log
@This function has been removed from the library.
@
text
@a0 1
[ removed from library ]
d2 1
a2 1
			       IDIFA(m,A,B,C)
d4 1
a4 1
Integer difference - array representation.
d7 3
a9 3
  m     :  a positive beta integer.
  A,B,C :  arrays of length m.  A and B contain non-negative 
            integers A' and B'.
d12 1
a12 1
  s     :  the sign of A - B.
d14 2
a15 1
Effect  :  |A' - B'| is produced in C.
d19 2
a20 2
Word IDIFA(m,A,B,C)
       Word m,*A,*B,*C;
d22 1
a22 1
       Word c,cp,i,j,s;
d24 28
a51 20
Step1: /* Compute leading zeros and sign of result. */
       i = m - 1;
       while (i >= 0) {
	  C[i] = A[i] - B[i];
          if (C[i] != 0)
	     break;
          i = i - 1; }
       s = SIGN(C[i]);
       if (s == 0)
          goto Return;
       if (s < 0)
          goto Step3;

Step2: /* Compute remaining digits of positive sum. */
       cp = 0;
       for (j = 0; j <= i; j++) {
	  c = A[j] - B[j] + cp;
	  if (c < 0) {
	     c = c + BETA;
	     cp = -1; }
d53 83
a135 2
	     cp = 0;
	  C[j] = c; }
d138 13
a150 7
Step3: /* Compute remaining digits of negative sum. */
       cp = 0;
       for (j = 0; j <= i; j++) {
	  c = B[j] - A[j] + cp;
	  if (c < 0) {
	     c = c + BETA;
	     cp = -1; }
d152 41
a192 2
	     cp = 0;
	  C[j] = c; }
d195 2
a196 1
        return(s);
@


1.2
log
@The BDigit declarations were changed to Word since BDigit caused problems
with isac.
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d19 1
a19 2
       BDigit m;
       Word *A,*B,*C;
d21 1
a21 2
       BDigit cp,i,j,s;
       Word c;
@
