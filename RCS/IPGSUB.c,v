head	1.2;
access;
symbols;
locks
	saclib:1.2; strict;
comment	@ * @;


1.2
date	94.03.29.12.21.59;	author Mark;	state typo;
branches;
next	1.1;

1.1
date	94.03.29.12.14.58;	author saclib;	state init;
branches;
next	;


desc
@Integral polynomial general substitution.
@


1.2
log
@Fixed typo in specs of L.
@
text
@/*===========================================================================
			    C <- IPGSUB(r,A,s,L)

Integral polynomial general substitution.

Inputs
  r : a BETA-digit, r >= 1, the number of variables.
  A : in Z[x_1,...,x_r].
  s : a BETA-digit, s >= 1.
  L : a list (B_1,...,B_r), with B_i in Z[y_1,...,y_s].

Outputs
  C  : in Z[y_1,...,y_s], C(y_1,...,y_s) =
       A(B1(y_1,...,y_s),...,Br(y_1,...,y_s)).
===========================================================================*/
#include "saclib.h"

Word IPGSUB(r,A,s,L)
       Word r,A,s,L;
{
       Word B,C,Lp,t;

Step1: /* A=0. */
       if (A == 0) {
	  C = 0;
	  goto Return; }

Step2: /* A /= 0. */
       C = PINV(r,A,s);
       Lp = L;
       t = r + s;
       do {
	  ADV(Lp,&B,&Lp);
	  C = IPSUB(t,C,s + 1,B);
	  t = t - 1; }
       while (Lp != NIL);

Return: /* Prepare for return. */
       return(C);
}
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
/*======================================================================
                      C <- IPGSUB(r,A,s,L)
d8 1
a8 1
  A : in Z[X1,...,Xr].
d10 1
a10 1
  L : a list (B1,...,Br), with Bi in Z[X1,...,Xs].
d13 3
a15 3
  C  : in Z[Y1,...,Ys], C(Y1,...,Ys) =
       A(B1(Y1,...,Ys),...,Br(Y1,...,Ys)).
======================================================================*/
a21 1
       /* hide B,Lp,t; */
d24 3
a26 5
       if (A == 0)
         {
         C = 0;
         goto Return;
         }
d32 5
a36 7
       do
         {
         ADV(Lp,&B,&Lp);
         C = IPSUB(t,C,s + 1,B);
         t = t - 1;
         }
       while (!(Lp == NIL));
@
