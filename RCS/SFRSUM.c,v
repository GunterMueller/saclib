head	1.2;
access;
symbols;
locks
	saclib:1.2; strict;
comment	@ * @;


1.2
date	2000.04.28.17.23.18;	author George;	state del;
branches;
next	1.1;

1.1
date	2000.04.27.20.24.02;	author George;	state init;
branches;
next	;


desc
@Single-precision floating-point real sum.
@


1.2
log
@Delete.
@
text
@[ removed from library ]

@


1.1
log
@Initial revision
@
text
@d1 1
a1 2
/*======================================================================
                      w <- SFRSUM(u,v)
a2 135
Single-precision floating-point real sum.  

Inputs
  u,v : single-precision floating-point real numbers.  

Outputs
  w   : a single-precision floating-point real approximation to u+v.
======================================================================*/
#include "saclib.h"

Word SFRSUM(u,v)
       Word u,v;
{
       Word B,D,a,b,bp,c,d,e,f,g,r,t,w;
       /* hide algorithm */

Step1: /* u=0 or v=0. */
       if (u == 0)
         {
         w = v;
         goto Return;
         }
       if (v == 0)
         {
         w = u;
         goto Return;
         }

Step2: /* Get fractions and exponents. */
       FIRST2(u,&e,&a);
       FIRST2(v,&f,&b);

Step3: /* u or v small. */
       d = e - f;
       if (d >= ZETA)
         {
         w = u;
         goto Return;
         }
       if (d <= -ZETA)
         {
         w = v;
         goto Return;
         }

Step4: /* Interchange. */
       if (d < 0)
         {
         t = e;
         e = f;
         f = t;
         t = a;
         a = b;
         b = t;
         d = -d;
         }

Step5: /* Obtain BETA/2 and 2**dl. */
       B = TABP2[ZETA];
       D = TABP2[d + 1];
       g = e;

Step6: /* Same signs. */
       if ((a > 0 && b > 0) || (a < 0 && b < 0))
         {
         c = a + b / D;
         if (ABS(c) >= BETA)
           {
           c = c / 2;
           g = g + 1;
           if (g == BETA)
             FAIL("SFRSUM","Overflow",u,v,g);
           }
         w = LIST2(g,c);
         goto Return;
         }

Step7: /* Opposite signs, dl=0. */
       if (d == 0)
         {
         c = a + b;
         if (c == 0)
           {
           w = 0;
           goto Return;
           }
         goto Step10;
         }

Step8: /* Opposite signs, dl=1. */
       if (d == 1)
         {
         bp = b / 2;
         c = a + bp;
         r = b - bp - bp;
         if (ABS(c) < B)
           {
           c = c + c + r;
           g = g - 1;
           }
         goto Step10;
         }

Step9: /* Opposite signs, dl > 1. */
       bp = b / D;
       c = a + bp;
       if (ABS(c) < B)
         {
         r = b - bp * D;
         r = r + r;
         if (r >= D)
           r = 1;
         else
           if (r <= -D)
             r = -1;
           else
             r = 0;
         c = c + c + r;
         g = g - 1;
         }

Step10: /* Normalize. */
       while (ABS(c) < B)
         {
         c = c + c;
         g = g - 1;
         }
       if (g <= -BETA)
         w = 0;
       else
         w = LIST2(g,c);

Return: /* Prepare for return. */
       return(w);
}
@
