head	1.3;
access;
symbols;
locks
	saclib:1.3; strict;
comment	@ * @;


1.3
date	2001.07.30.17.38.22;	author George;	state bug;
branches;
next	1.2;

1.2
date	2001.07.16.17.49.01;	author Werner;	state bug;
branches;
next	1.1;

1.1
date	98.04.23.20.27.06;	author George;	state new;
branches;
next	;


desc
@*
Floating-point catch.
@


1.3
log
@Inserted lines to call FAIL if malloc returns NULL.
@
text
@/*======================================================================
                      FPCATCH()

Floating-point catch.

Side Effects
  This function:
  1)  Sets FPHAND as the exception handling funciton for floating-
      point exceptions.
  2)  Sets overflow, underflow, and divide-by-zero as errors which
      result in traps.
  3)  Sets FPFLAG, a global variable that indicates whether a
      floating-point error has occured, to zero --- i.e. no error.
======================================================================*/
#include "saclib.h"
#include <ieeefp.h>
#include <sys/ucontext.h>

void FPCATCH() 
{
      struct sigaction *p;
  
Step1: /* Set FPHAND as the handler for floating point exceptions. */
      p = (struct sigaction *)malloc(sizeof(struct sigaction));
      if (p == NULL)
         Fail("FPCATCH","Out of memory.");
      p->sa_handler = NULL;
      p->sa_sigaction = FPHAND;
      sigemptyset(&(p->sa_mask));
      p->sa_flags = SA_SIGINFO;
      sigaction(SIGFPE,p,NULL);

Step2: /* Set exceptions that actually cause traps. This must include
overflow and underflow. */
      fpsetmask(FP_X_OFL | FP_X_UFL | FP_X_DZ);

Step3: /* Set error flag to zero. */
      FPFLAG = 0; 

Step4: /* Free p. */
      free(p);
     
Return: /* Prepare to return. */
      return;
}

@


1.2
log
@Added Step 4, to free the array p.
@
text
@d25 2
@


1.1
log
@Initial revision
@
text
@d23 1
a23 1
Step1: /* Set hand as the handler for floating point exceptions. */
d31 2
a32 1
Step2: /* Set exceptions that actually cause traps. */
d37 3
@
