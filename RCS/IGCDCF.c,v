head	1.2;
access;
symbols;
locks
	saclib:1.2; strict;
comment	@ * @;


1.2
date	94.01.09.16.43.11;	author George;	state algo;
branches;
next	1.1;

1.1
date	94.01.09.16.42.34;	author saclib;	state init;
branches;
next	;


desc
@Integer greatest common divisor and cofactors.
@


1.2
log
@Calls to IQ have been replaced by calls to IEQ.
@
text
@/*===========================================================================
			    IGCDCF(A,B; C,Ab,Bb)

Integer greatest common divisor and cofactors.  

Inputs
  A,B : in Z.

Outputs
  C   : gcd(A,B).  
  Ab  : If C = 0, then Ab = 0, otherwise Ab = A/C.
  Bb  : If C = 0, then Bb = 0, otherwise Bb = B/C.
===========================================================================*/
#include "saclib.h"

void IGCDCF(A,B, C_,Ab_,Bb_)
       Word A,B, *C_,*Ab_,*Bb_;
{
       Word Ab,Bb,C;

Step1: /* Compute. */
       C = IGCD(A,B);
       if (C == 0 || C == 1) {
	  Ab = A;
	  Bb = B; }
       else {
	  Ab = IEQ(A,C);
	  Bb = IEQ(B,C); }

Return: /* Prepare for return. */
       *C_ = C;
       *Ab_ = Ab;
       *Bb_ = Bb;
       return;
}
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
/*======================================================================
                      IGCDCF(A,B; C,Ab,Bb)
d7 1
a7 1
  A, B : in Z.
d10 4
a13 4
  C    : gcd(A,B).  
  Ab   : If C = 0, then Ab = 0, otherwise Ab = A/C.
  Bb   : If C = 0, then Bb = 0, otherwise Bb = B/C.
======================================================================*/
d23 6
a28 10
       if (C == 0 || C == 1)
         {
         Ab = A;
         Bb = B;
         }
       else
         {
         Ab = IQ(A,C);
         Bb = IQ(B,C);
         }
@
