head	1.2;
access;
symbols;
locks
	saclib:1.2; strict;
comment	@ * @;


1.2
date	94.08.21.13.40.31;	author George;	state algo;
branches;
next	1.1;

1.1
date	94.08.21.13.38.52;	author saclib;	state init;
branches;
next	;


desc
@Digit extended greatest common divisor.
@


1.2
log
@Shifting and subtraction is used for the divisions.
@
text
@/*=========================================================================
                            DEGCD(a,b;c,u,v)

Digit extended greatest common divisor.

Inputs
   a, b : BETA-digits, a >= b >= 0.

Outputs
   c : a BETA-digit, c = gcd(a,b), c >= 0.
   u, v : BETA-digits such that au + bv=c,
          with |u| <= b/(2c), |v| <= a/(2c).

Method
   The Euclidean algorithm with divisions performed by shifting and
   subtraction.
===========================================================================*/
#include "saclib.h"

void DEGCD(a,b, c_,u_,v_)
       Word a,b, *c_,*u_,*v_;
{
       Word a1,a2,a3,b2,q,u,u1,u2,u3,v,v1,v2,v3,c,d;

Step1: /* b = 0. */
	if (b == 0) {
           c = a;
	   u = 0;
	   v = 0;
           goto Return; }

Step2: /* Initialize. */
	a1 = a;
	a2 = b;
	u1 = 1;
	u2 = 0;
	v1 = 0;
	v2 = 1;

Step3: /* Quotient is less than 11. */
	a3 = a1 - a2;
	u3 = u1 - u2;
	v3 = v1 - v2;
	d = a3 - a2;
	if (d < 0)
	   goto Step5;
	a3 = d;
	u3 = u3 - u2;
	v3 = v3 - v2;
	d = a3 - a2;
	if (d < 0)
	   goto Step5;
	a3 = d;
	u3 = u3 - u2;
        v3 = v3 - v2;
	d = a3 - a2;
	if (d < 0)
	   goto Step5;
	a3 = d;
	u3 = u3 - u2;
        v3 = v3 - v2;
        d = a3 - a2;
        if (d < 0)
           goto Step5;
	a3 = d;
	u3 = u3 - u2;
        v3 = v3 - v2;
        d = a3 - a2;
        if (d < 0)
           goto Step5;
	a3 = d;
	u3 = u3 - u2;
        v3 = v3 - v2;
        d = a3 - a2;
        if (d < 0)
           goto Step5;
	a3 = d;
	u3 = u3 - u2;
        v3 = v3 - v2;
        d = a3 - a2;
        if (d < 0)
           goto Step5;
	a3 = d;
        u3 = u3 - u2;
        v3 = v3 - v2;
        d = a3 - a2;
        if (d < 0)
           goto Step5;
	a3 = d;
        u3 = u3 - u2;
        v3 = v3 - v2;
        d = a3 - a2;
        if (d < 0)
           goto Step5;
	a3 = d;
        u3 = u3 - u2;
        v3 = v3 - v2;
        d = a3 - a2;
        if (d < 0)
           goto Step5;

Step4: /* Quotient is 11 or more; divide by shifting and subtraction. */
	b2 = a2 << 1;
	d = 1;
	while (b2 <= a3) {
           b2 = b2 << 1;
	   d = d << 1; }
	b2 = b2 >> 1;
	q = 0;
	while (b2 >= a2) {
	   if (b2 <= a3) {
	      a3 = a3 - b2;
	      q = q + d; }
	   d = d >> 1;
	   b2 = b2 >> 1; }
	u3 = u3 - q * u2;
	v3 = v3 - q * v2;

Step5: /* Check for completion. */
	if (a3 == 0) goto Return;

Step6: /* Update and go back to Step3. */
	a1 = a2;
	a2 = a3;
	u1 = u2;
	u2 = u3;
	v1 = v2;
	v2 = v3;
	goto Step3;

Return: /* Prepare for return. */
	*c_ = a2;
	*u_ = u2;
	*v_ = v2;
	return;
}
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
/*======================================================================
                      DEGCD(a,b; c,u,v)
d7 1
a7 1
  a, b  : BETA-digits, a >= b >= 0.
d10 2
a11 2
  c  : a BETA-digits, c = gcd(a,b), c >= 0.
  u, v  : BETA-digits such that au + bv=c,
d13 5
a17 1
======================================================================*/
d23 1
a23 2
       Word a1,a2,a3,c,q,u,u1,u2,u3,v,v1,v2,v3;
       /* hide algorithm */
d25 105
a129 22
Step1: /* Compute. */
       a1 = a;
       a2 = b;
       u1 = 1;
       u2 = 0;
       v1 = 0;
       v2 = 1;
       while (a2 != 0)
         {
         QREM(a1,a2,&q,&a3);
         a1 = a2;
         a2 = a3;
         u3 = u1 - q * u2;
         u1 = u2;
         u2 = u3;
         v3 = v1 - q * v2;
         v1 = v2;
         v2 = v3;
         }
       c = a1;
       u = u1;
       v = v1;
d132 4
a135 4
       *c_ = c;
       *u_ = u;
       *v_ = v;
       return;
@
