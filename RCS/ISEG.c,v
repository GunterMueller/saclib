head	1.4;
access;
symbols;
locks
	saclib:1.4; strict;
comment	@ * @;


1.4
date	93.12.13.19.47.57;	author Werner;	state del;
branches;
next	1.3;

1.3
date	93.11.07.16.47.36;	author Mark;	state bug;
branches;
next	1.2;

1.2
date	93.10.30.10.03.56;	author Werner;	state embe;
branches;
next	1.1;

1.1
date	93.10.30.10.02.34;	author saclib;	state init;
branches;
next	;


desc
@Integer segmentation.
@


1.4
log
@This function has been removed from the library.
@
text
@[ removed from library ]
/*===========================================================================
                              ISEG(A,n; A1,A0)

Integer segmentation.

Inputs
  A  : in Z.
  n  : BETA-integer. n >= 0.

Outputs
  A1 :  the integral part of A/BETA^n.  
  A0 :  A-A1 * BETA^n.
===========================================================================*/
#include "saclib.h"

void ISEG(A,n,A1_,A0_)
       Word n,A,*A1_,*A0_;
{
       Word A0,A1,a,i;

Step1: /* n = 0. */
       if (n == 0) {
          A1 = A;
          A0 = 0;
          goto Return; }

Step2: /* A A BETA digit. */
       if (A < BETA) {
	  A1 = 0;
	  A0 = A;
	  goto Return; }

Step3: /* Create lists. */
       A1 = A;
       A0 = NIL;
       i = 0;
       do {
	  i = i + 1;
	  ADV(A1,&a,&A1);
	  A0 = COMP(a,A0); }
       while (!(i == n || A1 == NIL));

Step4: /* Normalize A1. */
       if (A1 == NIL)
	  A1 = 0;
       else
	  if (RED(A1) == NIL)
	     A1 = FIRST(A1);

Step5: /* Normalize A0. */
       while (A0 != NIL && FIRST(A0) == 0)
	  A0 = RED(A0);
       A0 = INV(A0);
       if (A0 == NIL)
	  A0 = 0;
       else
	  if (RED(A0) == NIL)
	     A0 = FIRST(A0);

Return: /* Prepare for return. */
       *A1_ = A1;
       *A0_ = A0;
       return;
}
@


1.3
log
@The BDigit declarations were changed to Word since BDigit caused problems
with isac.
@
text
@d1 1
@


1.2
log
@Modified to allow n = 0 in the input.
This is useful for the recursive short product computation.
@
text
@d16 2
a17 3
void ISEG(A,n, A1_,A0_)
       BDigit n;
       Word A, *A1_,*A0_;
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
/*======================================================================
                      ISEG(A,n; A1,A0)
d4 1
a4 1
Integer segmentation.  
d8 1
a8 1
  n  : BETA-integer. n > 0.
d13 1
a13 1
======================================================================*/
d17 2
a18 1
       Word A,n, *A1_,*A0_;
a20 1
       /* hide A1,a,i; */
d22 11
a32 7
Step1: /* A A BETA digit. */
       if (A < BETA)
         {
         A1 = 0;
         A0 = A;
         goto Return;
         }
d34 1
a34 1
Step2: /* Create lists. */
d38 4
a41 6
       do
         {
         i = i + 1;
         ADV(A1,&a,&A1);
         A0 = COMP(a,A0);
         }
d44 1
a44 1
Step3: /* Normalize A1. */
d46 1
a46 1
         A1 = 0;
d48 2
a49 2
         if (RED(A1) == NIL)
           A1 = FIRST(A1);
d51 1
a51 1
Step4: /* Normalize A0. */
d53 1
a53 1
         A0 = RED(A0);
d56 1
a56 1
         A0 = 0;
d58 2
a59 2
         if (RED(A0) == NIL)
           A0 = FIRST(A0);
@
