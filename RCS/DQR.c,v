head	1.2;
access;
symbols;
locks
	saclib:1.2; strict;
comment	@ * @;


1.2
date	94.02.23.20.15.37;	author George;	state algo;
branches;
next	1.1;

1.1
date	94.02.23.20.14.53;	author saclib;	state init;
branches;
next	;


desc
@Digit quotient and remainder.
@


1.2
log
@*** empty log message ***
@
text
@/*======================================================================
                      DQR(a1,a0,b;q,r)

Digit quotient and remainder.  

Inputs
   a1, a0, b : BETA-integers with a1 * a0 >= 0 and |b| > |a1|.  

Outputs
   q : a BETA-integer, the integral part of (a1 * BETA + a0) / b.
   r : a BETA-integer, (a1 * BETA + a0) - b * q.  

Restriction: This program is valid only if ZETA = 29 and the
word length is 32 bits.
======================================================================*/
#include "saclib.h"

void DQR(a1,a0,b,q_,r_)
       Word a1,a0,b,*q_,*r_;
{
       Word ap0,ap1,bp,h,k,q,r;

Step1: /* a1 = 0. */
	if (a1 == 0) {
           QREM(a0,b,&q,&r);
           goto Return; }

Step2: /* Compute absolute values. */
	ap1 = absm(a1);
	ap0 = absm(a0);
	bp = absm(b);

Step3: /* b  a half-digit? */
	if (bp < TABP2[16]) {
	   PHDQR(ap1,ap0,bp,&q,&r);
	   goto Step7; }

Step4: /* Normalize. */
	k = PDLOG2(bp);
	h = ZETA - k;
	bp = bp << h;
	ap1 = (ap1 << h) | (ap0 >> k);
	ap0 = (ap0 << h) & BETA1;

Step5: /* Apply PNDQR. */
	PNDQR(ap1,ap0,bp,&q,&r);

Step6: /* Denormalize. */
	r = r >> h;

Step7: /* Adjust signs. */
	if (a1 < 0) {
	   q = - q;
	   r = - r; }
	if (b < 0)
	   q = - q;

Return: /* Prepare for return. */
	*q_ = q;
	*r_ = r;
	return;
}
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
                      DQR(a1,a0,b; q,r)
d7 1
a7 1
  a1, a0, b : BETA-integers with a1 * a0 >= 0 and abs(b) > abs(a1).  
d10 5
a14 2
  q : a BETA-integer, the integral part of (a1 * BETA + a0) / b.
  r : a BETA-integer, (a1 * BETA + a0) - b * q.  
d18 2
a19 2
void DQR(a1,a0,b, q_,r_)
       Word a1,a0,b, *q_,*r_;
d21 1
a21 2
       Word ap0,ap1,bp,i,q,qp,r;
       /* hide algorithm */
d24 3
a26 5
       if (a1 == 0)
         {
         QREM(a0,b,&q,&r);
         goto Return;
         }
d29 28
a56 33
       ap1 = ABS(a1);
       ap0 = ABS(a0);
       bp = ABS(b);

Step3: /* Shift and subtract. */
       qp = 0;
       for (i = 1; i <= ZETA; i++)
         {
         ap1 = ap1 + ap1;
         ap0 = ap0 + ap0;
         if (ap0 >= BETA)
           {
           ap0 = ap0 - BETA;
           ap1 = ap1 + 1;
           }
         qp = qp + qp;
         if (ap1 >= bp)
           {
           ap1 = ap1 - bp;
           qp = qp + 1;
           }
         }

Step4: /* Compute signs. */
       if (a1 < 0)
         {
         qp = -qp;
         ap1 = -ap1;
         }
       if (b < 0)
         qp = -qp;
       q = qp;
       r = ap1;
d59 3
a61 3
       *q_ = q;
       *r_ = r;
       return;
@
