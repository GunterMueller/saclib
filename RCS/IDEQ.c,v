head	1.5;
access;
symbols;
locks
	saclib:1.5; strict;
comment	@ * @;


1.5
date	99.07.26.17.17.40;	author Werner;	state embe;
branches;
next	1.4;

1.4
date	95.08.30.11.19.31;	author Mark;	state bug;
branches;
next	1.3;

1.3
date	95.07.13.15.30.02;	author George;	state spec;
branches;
next	1.2;

1.2
date	94.01.09.22.41.42;	author Mark;	state bug;
branches;
next	1.1;

1.1
date	94.01.09.16.07.33;	author George;	state new;
branches;
next	;


desc
@Integer-digit exact quotient.
@


1.5
log
@Changed "SIZE" to "IDEQ_SIZE" to enable compilation of several
programs in one file.
@
text
@/*===========================================================================
			       C <- IDEQ(A,b)

Integer-digit exact quotient.   

Inputs
  A : in Z.  
  b : a non-zero BETA-digit which is a divisor of A.

Output
  C : the quotient A/b.
===========================================================================*/
#include "saclib.h"
#define IDEQ_SIZE 100

Word IDEQ(A,b)
       Word A,b;
{
       Word *Ah,Ap[IDEQ_SIZE],C;
       Word a,ap,bp,bpp,c,cp,g,i,l,m,N,n,s,s1,s2,o,r;

Step1: /* A single-precision. */
       if (A < BETA)  { 
	  C = A / b;
          goto Return; }

Step2: /* Copy |A| into arrays, determine lengths and signs. */
       IFLTA(A,Ap,IDEQ_SIZE,&Ah,&n,&s1,&o);
       s2 = signm(b);
       if (s2 > 0)
	  s = s1;
       else
	  s = -s1;
       bp = absm(b);

Step3: /* Divide b by a power of 2. */
       l = 0;
       while ((bp & 01) == 0) {
	  l = l + 1;
	  bp = bp >> 1; }

Step4: /* Divide B by the same power of t. */
       if (l == 0) goto Step5;
       r = 00;
       m = ZETA - l;
       N = (01 << l) - 1;
       for (i = n - 1; i >= 0; i--) {
	  a = Ah[i];
	  ap = (a >> l) | r; 
	  r = (a & N) << m;
	  Ah[i] = ap; }

Step5: /* Compute modular inverse */
       bpp = MDINVB(bp);

Step6: /* Divide by Jebelean's method. */
       g = 0;
       for (i = 0; i < n - 1; i++) { 
	  if (Ah[i] == 0) continue;
	  DPR(Ah[i],bpp,&cp,&Ah[i]);
	  DPR(Ah[i],bp,&c,&cp);
	  a = Ah[i + 1];
	  a = a - g - c;
	  if (a < 0) {
	     a = a + BETA;
	     g = 1; }
	  else
	     g = 0;
	  Ah[i + 1] = a; }
       DPR(Ah[i],bpp,&c,&Ah[i]);
	  
Step7: /* Copy result to a list. */
       C = IFATL(Ah,n,s);

Step8: /* Free dynamic array */
       if (n > IDEQ_SIZE) 
	  FREEARRAY(Ah);

Return: /* Prepare for return */
	return(C);
}
@


1.4
log
@The BDigit declarations were changed to Word since BDigit caused problems
with isac.
@
text
@d14 1
a14 1
#define SIZE 100
d19 1
a19 1
       Word *Ah,Ap[SIZE],C;
d28 1
a28 1
       IFLTA(A,Ap,SIZE,&Ah,&n,&s1,&o);
d76 1
a76 1
       if (n > SIZE) 
@


1.3
log
@Corrected the algorithm name.
@
text
@d17 1
a17 2
       Word A;
       BDigit b;
d20 1
a20 1
       BDigit a,ap,bp,bpp,c,cp,g,i,l,m,N,n,s,s1,s2,o,r;
@


1.2
log
@Changed abs and sign to absm and signm.
@
text
@d4 1
a4 1
Integer-digit exact division.   
@


1.1
log
@Initial revision
@
text
@d30 1
a30 1
       s2 = sign(b);
d35 1
a35 1
       bp = abs(b);
@
