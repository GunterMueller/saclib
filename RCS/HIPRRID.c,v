head	1.3;
access;
symbols;
locks
	saclib:1.3; strict;
comment	@ * @;


1.3
date	2000.06.03.20.01.25;	author George;	state bug;
branches;
next	1.2;

1.2
date	2000.05.19.16.05.06;	author George;	state algo;
branches;
next	1.1;

1.1
date	98.04.23.20.27.03;	author George;	state new;
branches;
next	;


desc
@*
Hardware interval polynomial real root isolation, Descartes method.
@


1.3
log
@Added a line to set t = 0 in Step6 to ensure that a failure would
not mistakenly be reported.
@
text
@/*======================================================================
                      HIPRRID(n,A; L,t)

Hardware interval polynomial real root isolation, Descartes method.

Inputs
   n : a positive beta-digit.
   A : a hardware interval polynomial of degree n.  A(x) contains
       a squarefree polynomial and A[n] does not contain 0.

Outputs
   L : If t = 0, L is a a list (I_1,...,I_r), r >= 0, of standard
       and one-point binary rational intervals, with I_1 < ... , I_r,
       that isolates the real roots of A.  If t /= 0, L is
       undefined.
   t : 0, 1 or 2.  If t = 1, isolation failed due to exponent
       limitation.  If t = 2, failure was due to mantissa limitation.
======================================================================*/
#include "saclib.h"

void HIPRRID(n,A, L_,t_)
        BDigit n;
        interval *A;
	Word *L_;
	BDigit *t_;
{
	BDigit k,s,t;
	interval *B,*C;
	Word b,I,J,L,L1,L2;

Step1: /* Compute a bound for the positive roots. */
	k = HIPPRB(n,A);

Step2: /* Isolate the positive roots. */
	if (k == NIL) {
	   L1 = NIL;
	   goto Step3; }
	HIPBHT(n,A,k, &B,&t);
	if (t == 0) {
	   FREEARRAY(B);
	   t = 1;
	   goto Return; }
	HIPRRISD(n,B,0,LIST2(1,-k), &L1,&t);
	FREEARRAY(B);
	if (t != 0)
	   goto Return;

Step3: /* Compute a bound for the negative roots. */
	B = HIPNEGT(n,A);
	k = HIPPRB(n,B);

Step4: /* Isolate the negative roots. */
	if (k == NIL) {
           L2 = NIL;
           goto Step5; }
        HIPBHT(n,B,k, &C,&t);
	FREEARRAY(B);
	if (t == 0) {
	   FREEARRAY(C);
	   t = 1;
	   goto Return; }
        HIPRRISD(n,C,LIST2(-1,-k),0, &L2,&t);
	FREEARRAY(C);
        if (t != 0)
           goto Return;

Step5: /* Include 0 if a root. */
	s = HISIGN(A[0]);
	if (s == NIL) {
	   t = 2;
	   goto Return; }
	if (s == 0) {
	   I = LIST2(0,0);
	   L1 = COMP(I,L1); }

Step6: /* Concatenaate L_2 and L_1. */
	L = CONC(L2,L1);
	t = 0;

Return: /* Return L and t. */
	*L_ = L;
	*t_ = t;
	return;
}
@


1.2
log
@Revised the specifications and the algorithm in order to
distinguish the causes of failure.
@
text
@d78 1
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
                      L <- HIPRRID(n,A)
d11 7
a17 6
Output
   L : either 0 or a list (I_1,...,I_r), r >= 0, of standard and
       one-point binary rational intervals, with I_1 < ... , I_r.
       If L = 0, the program was unable to isolate the roots of A.
       Otherwise, L = (I_1,...,I_r) is a list of isolating intervals
       for the roots of A.
d21 1
a21 1
Word HIPRRID(n,A)
d24 2
d27 1
a27 1
	BDigit k,s,t,u;
d31 1
a31 4
Step1: /* Set floating-point trap. */
	FPCATCH();

Step2: /* Compute a bound for the positive roots. */
d34 1
a34 1
Step3: /* Isolate the positive roots. */
d37 1
a37 1
	   goto Step4; }
d41 1
a41 1
	   L = 0;
d43 1
a43 1
	L1 = HIPRRISD(n,B,0,LIST2(1,-k));
d45 2
a46 3
	if (L1 == 0) {
	   L = 0;
	   goto Return; }
d48 1
a48 1
Step4: /* Compute bound for the negative roots. */
d52 1
a52 2

Step5: /* Isolate the negative roots. */
d55 2
a56 2
           goto Step6; }
        HIPBHT(n,B,k, &C,&u);
d58 3
a60 2
	if (u == 0) {
	   L = 0;
d62 1
a62 1
        L2 = HIPRRISD(n,C,LIST2(-1,-k),0);
d64 2
a65 7
	if (FPFLAG == 1) {
	   FPCATCH();
	   L = 0;
	   goto Return; }
        if (L2 == 0) {
           L = 0;
           goto Return; }
d67 1
a67 1
Step6: /* Include 0 if a root. */
d70 1
a70 1
	   L = 0;
d76 1
a76 1
Step7: /* Concatenaate L_2 and L_1. */
d79 4
a82 7
Step8: /* Check for floating-point overflow or underflow. */
	if (FPFLAG == 1) {
	   L = 0;
	   FPCATCH(); }

Return: /* Return L. */
	return(L);
@
