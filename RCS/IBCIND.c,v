head	1.2;
access;
symbols;
locks
	saclib:1.2; strict;
comment	@ * @;


1.2
date	94.01.09.16.09.15;	author George;	state algo;
branches;
next	1.1;

1.1
date	94.01.09.16.08.19;	author saclib;	state init;
branches;
next	;


desc
@Integer binomial coefficient induction.
@


1.2
log
@Calls to IDQ have replaced by calls to IDEQ.
@
text
@/*===========================================================================
			     B <- IBCIND(A,n,k)

Integer binomial coefficient induction.

Inputs
  n,k : BETA-digits with 0 <= k <= n.
  A : the binomial coefficient (n choose k).

Outputs
  B : the binomial coefficient (n choose (k+1)).
===========================================================================*/
#include "saclib.h"

Word IBCIND(A,n,k)
       Word A,n,k;
{
       Word B,kp,np;

Step1: /* Compute. */
       np = n - k;
       kp = k + 1;
       if ((A < BETA) && (np < (BETA / A)))
	  B = (A * np) / kp;
       else
	  B = IDEQ(IDPR(A,np),kp);

Return: /* Prepare for return. */
       return(B);
}
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
/*======================================================================
                      B <- IBCIND(A,n,k)
d12 1
a12 1
======================================================================*/
a18 1
       /* hide kp,np; */
d23 2
a24 2
       if (A < BETA && np < BETA / A)
         B = (A * np) / kp;
d26 1
a26 1
         B = IDQ(IDPR(A,np),kp);
@
