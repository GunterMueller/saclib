head	1.5;
access;
symbols;
locks
	saclib:1.5; strict;
comment	@ * @;


1.5
date	2002.01.15.18.29.01;	author George;	state algo;
branches;
next	1.4;

1.4
date	99.07.17.19.08.20;	author Werner;	state bug;
branches;
next	1.3;

1.3
date	95.07.14.11.36.20;	author Mark;	state embe;
branches;
next	1.2;

1.2
date	94.01.09.16.18.51;	author George;	state algo;
branches;
next	1.1;

1.1
date	94.01.09.16.18.17;	author saclib;	state init;
branches;
next	;


desc
@Integral polynomial greatest common divisor and cofactors.
@


1.5
log
@IPGCDC now uses nonmodular division to compute the cofactors.
@
text
@/*======================================================================
			   IPGCDC(r,A,B; C,Ab,Bb)

Integral polynomial greatest common divisor and cofactors.

Inputs
   r : a BETA-digit, r >= 0.
   A,B : integral polynomials in r variables.

Outputs
   C : If A = B = 0 then C = 0.  Otherwise C = gcd(A,B).
   Ab,Bb : If A = B = 0 then Ab = 0 and Bb = 0.  Otherwise
           Ab = A / C and Bb = B / C.
======================================================================*/
#include "saclib.h"

void IPGCDC(r,A,B, C_,Ab_,Bb_)
       Word r,A,B, *C_,*Ab_,*Bb_;
{
       Word Ab,Ah,Ahs,Ap,As,Bb,Bh,Bhs,Bp,Bs,C,Chs,Cp,Cpp,Cs;
       Word P,Q,R,U,Us,V,Vs,W,Ws;
       Word a,ah,b,bh,c,ch,cp,cs;
       BDigit p,q,t;

Step1: /* A = B = 0. */
       if (A == 0 && B == 0) {
	  C = 0;
	  Ab = 0;
	  Bb = 0;
	  goto Return; }

Step2: /* r = 0. */
       if (r == 0) {
	  C = IGCD(A,B);
	  Ab = IEQ(A,C);
	  Bb = IEQ(B,C);
	  goto Return; }

Step3: /* A = 0 or B = 0. */
       if (A == 0) {
	  C = IPABS(r,B);
	  Ab = 0;
	  Bb = PINV(0,IPSIGN(r,B),r);
	  goto Return; }
       if (B == 0) {
	  C = IPABS(r,A);
	  Bb = 0;
	  Ab = PINV(0,IPSIGN(r,A),r);
	  goto Return; }
       
Step4: /* Compute integer contents and primitive parts. */
       IPICPP(r,A,&a,&Ah);
       IPICPP(r,B,&b,&Bh);
       c = IGCD(a,b);

Step5: /* Compute normalization factor. */
       ah = PLBCF(r,Ah);
       bh = PLBCF(r,Bh);
       ch = IGCD(ah,bh);

Step6: /* Compute degree vectors. */
       U = PDEGV(r,Ah);
       V = PDEGV(r,Bh);

Step7: /* Initialize prime list and degree vector. */
       P = LPRIME;
       W = COMP(FIRST(U) + 1,RED(U));

Step8: /* Obtain next prime. */
       if (P == NIL)
	  FAIL("IPGCDC","Prime list exhausted",r,A,B);
       ADV(P,&p,&P);

Step9: /* Map normalization factor. */
       cs = MDHOM(p,ch);
       if (cs == 0)
	  goto Step8;

Step10: /* Map Ah and Bh. */
       As = MPHOM(r,p,Ah);
       Us = PDEGV(r,As);
       if (!EQUAL(U,Us))
	  goto Step8;
       Bs = MPHOM(r,p,Bh);
       Vs = PDEGV(r,Bs);
       if (!EQUAL(V,Vs))
	  goto Step8;

Step11: /* Compute g.c.d. */
	if (r == 1)
	   Cs = MUPGCD(p,As,Bs);
	else
           MPGCDC(r,p,As,Bs,&Cs,&Ahs,&Bhs);

Step12: /* Test for constant g.c.d. */
       if (IPONE(r,Cs) == 1) {
	  C = PINV(0,c,r);
	  Ab = IPIQ(r,A,c);
	  Bb = IPIQ(r,B,c);
	  goto Return; }

Step13: /* Conditional initialization of chinese remainder process. */
       Ws = PDEGV(r,Cs);
       t = VCOMP(W,Ws);
       if (t >= 2) {
	  Q = 1;
	  Ap = 0;
	  Bp = 0;
	  Cp = 0;
	  W = VMIN(W,Ws); }

Step14: /* Test for unlucky prime. */
       if (t == 1 || t == 3)
	  goto Step8;

Step15: /* Apply chinese remainder algorithm. */
       Chs = MPMDP(r,p,cs,Cs);
       q = MDINV(p,MDHOM(p,Q));
       Cpp = IPCRA(Q,p,q,r,Cp,Chs);
       Q = IPROD(Q,p);
       
Step16: /* Test for completion. */
        if (! EQUAL(Cp,Cpp)) {
	   Cp = Cpp;
	   goto Step8; }
	IPICPP(r,Cpp,&cp,&C);
	IPQR(r,A,C, &Ab,&R);
	if (R != 0)
	   goto Step8;
	IPQR(r,B,C, &Bb,&R);
        if (R != 0)
           goto Step8;

Step17: /* Restore content. */
       C = IPIP(r,c,C);

Return: /* Return C, Ab and Bb. */
       *C_ = C;
       *Ab_ = Ab;
       *Bb_ = Bb;
       return;
}
@


1.4
log
@Removed the line
   SWRITE("gb = "); IWRITE(va_arg(argPtr,int)); SWRITE("\n");
removed gb as an argument of the FAIL statement, and removed
the type declaration of gb.
@
text
@d1 1
a1 1
/*===========================================================================
d8 1
a8 1
 A,B : in Z[x_1,...,x_r].
d11 3
a13 5
 C     : in Z[x_1,...,x_r], C = gcd(A,B).
 Ab,Bb : If C is non-zero then 
            Ab = A/C and Bb = B/C.
         Otherwise 
            Ab = 0 and Bb = 0.
d20 4
a23 3
       Word Ab,Ah,Ahs,Ap,As,Bb,Bh,Bhs,Bp,Bs,C,Chs,Cp,Cs,P,Q,U,Us,
            V,Vs,W,Ws,a,ab,ah,ap,b,bb,bh,bp,c,ch,chp,cp,cpp,cs,d,
            e,f,g,p,q,qp,t;
d39 1
a39 1
Step3: /* A=0 or B=0. */
d61 1
a61 7
Step6: /* Compute norms. */
       d = IPMAXN(r,Ah);
       e = IPMAXN(r,Bh);
       f = IMAX(d,e);
       g = IPROD(IPROD(2,ch),f);

Step7: /* Compute degree vectors. */
d65 1
a65 1
Step8: /* Initialize prime list and degree vector. */
d69 1
a69 1
Step9: /* Obtain next prime. */
d74 1
a74 1
Step10: /* Map normalization factor. */
d77 1
a77 1
	  goto Step9;
d79 1
a79 1
Step11: /* Map Ah and Bh. */
d82 2
a83 2
       if (EQUAL(U,Us) == 0)
	  goto Step9;
d86 2
a87 2
       if (EQUAL(V,Vs) == 0)
	  goto Step9;
d89 5
a93 2
Step12: /* Compute g.c.d. */
       MPGCDC(r,p,As,Bs,&Cs,&Ahs,&Bhs);
d95 1
a95 1
Step13: /* Test for constant g.c.d. */
d102 1
a102 1
Step14: /* Conditional initialization of chinese remainder process. */
d112 1
a112 1
Step15: /* Test for unlucky prime. */
d114 1
a114 1
	  goto Step9;
d116 1
a116 1
Step16: /* Apply chinese remainder algorithm. */
d118 2
a119 4
       qp = MDINV(p,MDHOM(p,Q));
       Cp = IPCRA(Q,p,qp,r,Cp,Chs);
       Ap = IPCRA(Q,p,qp,r,Ap,Ahs);
       Bp = IPCRA(Q,p,qp,r,Bp,Bhs);
d122 11
a132 10
Step17: /* Test for completion. */
       if (ICOMP(Q,g) <= 0)
	  goto Step9;
       q = ILOG2(Q);
       cp = ILOG2(IPSUMN(r,Cp));
       ap = ILOG2(IPMAXN(r,Ap));
       bp = ILOG2(IPMAXN(r,Bp));
       cpp = MAX(ap,bp);
       if (q < cp + cpp + 2)
	  goto Step9;
d134 1
a134 5
Step18: /* Remove normalization. */
       IPICPP(r,Cp,&cp,&C);
       chp = IEQ(ch,cp);
       Ab = IPIQ(r,Ap,chp);
       Bb = IPIQ(r,Bp,chp);
a135 4
       ab = IEQ(a,c);
       Ab = IPIP(r,ab,Ab);
       bb = IEQ(b,c);
       Bb = IPIP(r,bb,Bb);
d137 1
a137 1
Return: /* Prepare for return. */
@


1.3
log
@Changed PRIME to LPRIME.
@
text
@d24 1
a24 1
            e,f,g,gb,p,q,qp,t;
d78 1
a78 1
	  FAIL("IPGCDC","Prime list exhausted",r,A,B,gb);
@


1.2
log
@Calls to IQ have been replaced by calls to IEQ.
@
text
@d73 1
a73 1
       P = PRIME;
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
/*======================================================================
                      IPGCDC(r,A,B; C,Ab,Bb)
d8 1
a8 1
 A,B : in Z[X1,...,Xr].
d11 1
a11 1
 C     : in Z[X1,...,Xr], C = gcd(A,B).
d13 1
a13 1
           Ab = A/C and Bb = B/C.
d15 1
a15 1
           Ab = 0 and Bb = 0.
d22 2
a23 2
       Word Ab,Ah,Ahs,Ap,As,Bb,Bh,Bhs,Bp,Bs,C,Chs,Cp,Cs,P,Q,U,Us,V,
            Vs,W,Ws,a,ab,ah,ap,b,bb,bh,bp,c,ch,chp,cp,cpp,cs,d,
d26 1
a26 1
Step1: /* A=B=0. */
d28 4
a31 5
         C = 0;
         Ab = 0;
         Bb = 0;
         goto Return;
       }
d33 1
a33 1
Step2: /* r=0. */
d35 4
a38 5
         C = IGCD(A,B);
         Ab = IQ(A,C);
         Bb = IQ(B,C);
         goto Return;
       }
d42 4
a45 5
         C = IPABS(r,B);
         Ab = 0;
         Bb = PINV(0,IPSIGN(r,B),r);
         goto Return;
       }
d47 4
a50 5
         C = IPABS(r,A);
         Bb = 0;
         Ab = PINV(0,IPSIGN(r,A),r);
         goto Return;
       }
d78 1
a78 1
         FAIL("IPGCDC","Prime list exhausted",r,A,B,gb);
d84 1
a84 1
         goto Step9;
d90 1
a90 1
         goto Step9;
d94 1
a94 1
         goto Step9;
d101 4
a104 5
         C = PINV(0,c,r);
         Ab = IPIQ(r,A,c);
         Bb = IPIQ(r,B,c);
         goto Return;
       }
d110 5
a114 6
         Q = 1;
         Ap = 0;
         Bp = 0;
         Cp = 0;
         W = VMIN(W,Ws);
       }
d118 1
a118 1
         goto Step9;
d130 1
a130 1
         goto Step9;
d137 1
a137 1
         goto Step9;
d141 1
a141 1
       chp = IQ(ch,cp);
d145 1
a145 1
       ab = IQ(a,c);
d147 1
a147 1
       bb = IQ(b,c);
@
