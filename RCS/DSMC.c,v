head	1.2;
access;
symbols;
locks
	saclib:1.2; strict;
comment	@ * @;


1.2
date	97.02.17.15.34.35;	author George;	state spec;
branches;
next	1.1;

1.1
date	94.09.18.12.28.02;	author Mark;	state new;
branches;
next	;


desc
@Digit solution of modular congruence.
@


1.2
log
@Previous specifications stated non-zero return.  Zero was, however,
sometimes returned.  Specifications have been changed, and NIL is now
returned in cases where zero had previously been returned.
@
text
@/*===========================================================================
                             r <- DSMC(m,mp,u)

Digit solution of modular congruence.

Inputs
  m,u : BETA-digits, m > 1, m odd, m > u >= 0.
  mp  : a BETA-digit, mp = floor((m/2)^(1/2)).

Outputs
  r : if u = 0 then r = 0.  Otherwise, if there exist integers 
      a > 0 and b /= 0 such that |a|, b < (m/2)^(1/2) and
      a = b u (mod m) then r = (a,b), but if not then r = NIL.
===========================================================================*/
#include "saclib.h"

Word DSMC(m,mp,u)
       Word m,mp,u;
{
       Word u0,u1,b0,b1,r,q,s;

Step1: /* u = 0. */
       if (u == 0) {
          r = 0;
          goto Return; }

Step2: /* Initialize. */
       if (2*u > m) {
          u1 = m - u;
          s = -1; }
       else {
          u1 = u;
          s = 1; }
       u0 = m;
       b0 = 0;
       b1 = 1;

Step3: /* Compute remainders and cosequence. */
       do {
          if (ABS(b1) > mp) {
             r = NIL;
             goto Return; }
          if (u1 <= mp) {
             if (u1 == 0) 
                r = NIL;
             else {
                if (b1 < 0) {
                   u1 = -u1;
                   b1 = -b1; }
                if (s == -1)
                   u1 = -u1;
                r = LIST2(u1,b1); }
             goto Return; }
          QREM(u0,u1,&q,&r);
          u0 = u1;
          u1 = r;
          r = b1;
          b1 = b0 - q * b1;
          b0 = r; }
       while(1);

Return: /* Prepare for return. */
       return(r);
}
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
			     r <- DSMC(m,mp,u)
d7 1
a7 1
  m,u : BETA-digits, m > 1, m odd, m > u => 0.
d11 3
a13 4
  r : a pair (a,b) of BETA-digits or r = NIL.  If there exist integers a
      and b such that 1 <= b < (m/2)^(1/2), |a| < (m/2)^(1/2) and a = b u
      (mod m) then r = (a,b); otherwise r = NIL.  If such a and b exist,
      they are unique.
d22 6
a27 1
Step1: /* Initialize. */
d29 2
a30 2
	  u1 = m - u;
	  s = -1; }
d32 2
a33 2
	  u1 = u;
	  s = 1; }
d38 1
a38 1
Step2: /* Compute remainders and cosequence. */
d40 20
a59 20
	  if (ABS(b1) > mp) {
	     r = NIL;
	     goto Return; }
	  if (u1 <= mp) {
	     if (u1 == 0) 
		r = 0;
	     else {
		if (b1 < 0) {
		   u1 = -u1;
		   b1 = -b1; }
		if (s == -1)
		   u1 = -u1;
		r = LIST2(u1,b1); }
	     goto Return; }
	  QREM(u0,u1,&q,&r);
	  u0 = u1;
	  u1 = r;
	  r = b1;
	  b1 = b0 - q * b1;
	  b0 = r; }
@
