head	1.2;
access;
symbols;
locks
	saclib:1.2; strict;
comment	@ * @;


1.2
date	94.01.09.16.42.09;	author George;	state algo;
branches;
next	1.1;

1.1
date	94.01.09.16.41.45;	author saclib;	state init;
branches;
next	;


desc
@Integer extended greatest common divisor algorithm.
@


1.2
log
@Calls to IQ have been replaced by calls to IEQ.
@
text
@/*===========================================================================
                      IEGCD(a,b; c,u1,v1)

Integer extended greatest common divisor algorithm.

Inputs
  a,b : in Z.

Outputs
  c     : gcd(a,b)
  u1,v1 : in Z such that a * u1 + b * v1 = c.
          If a /= 0 and b /= 0 then 
             abs(u1) <= abs(b)/(2*c),
             abs(v1) <= abs(a)/(2*c).
          Otherwise 
             u1 = sign(a),
             v1 = sign(b).
===========================================================================*/
#include "saclib.h"

void IEGCD(a,b, c_,u1_,v1_)
       Word a,b, *c_,*u1_,*v1_;
{
       Word c,u1,v1;

Step1: /* Compute. */
       IHEGCD(a,b,&c,&v1);
       if (a == 0)
	  u1 = 0;
       else
	  u1 = IEQ(IDIF(c,IPROD(b,v1)),a);

Return: /* Prepare for return. */
       *c_ = c;
       *u1_ = u1;
       *v1_ = v1;
       return;
}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*======================================================================
d7 1
a7 1
  a, b  : in Z.
d10 9
a18 9
  c       : gcd(a,b)
  u1, v1  : in Z such that a * u1 + b * v1 = c.
            If a /= 0 and b /= 0 then 
               abs(u1) <= abs(b)/(2*c),
               abs(v1) <= abs(a)/(2*c).
            Otherwise 
               u1=sign(a),
               v1 = sign(b).
======================================================================*/
d29 1
a29 1
         u1 = 0;
d31 1
a31 1
         u1 = IQ(IDIF(c,IPROD(b,v1)),a);
@
