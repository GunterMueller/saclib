head	1.2;
access;
symbols;
locks
	saclib:1.2; strict;
comment	@ * @;


1.2
date	94.04.04.22.56.42;	author George/Nam;	state algo;
branches;
next	1.1;

1.1
date	94.04.04.22.37.23;	author saclib;	state init;
branches;
next	;


desc
@Integer sum.
@


1.2
log
@*** empty log message ***
@
text
@/*===========================================================================
			       C <- ISUM(A,B)

Integer sum.  

Inputs
  A,B : in Z.

Output
  C   : A + B.
===========================================================================*/
#include "saclib.h"

Word ISUM(A,B)
       Word A,B;
{
       Word Ap,Bp,C,Cb,Cp,Cpp,Cs,a,b,c,cp,s,t,u;

Step1: /* A or B zero. */
       if (A == 0) {
	  C = B;
	  goto Return; }
       if (B == 0) {
	  C = A;
	  goto Return; }

Step2: /* A and B single-precision. */
       if (A < BETA && B < BETA) {
	  c = A + B;
	  if (c >= BETA)
	     C = LIST2(c - BETA,1);
	  else
	     if (c <= -BETA)
		C = LIST2(c + BETA,-1);
	     else
		C = c;
	  goto Return; }

Step3: /* Determine signs of inputs. */
       s = ISIGNF(A);
       t = ISIGNF(B);

Step4: /* A or B single-precision. */
       if (A < BETA)
	  Ap = LIST1(A);
       else
	  Ap = A;
       if (B < BETA)
	  Bp = LIST1(B);
       else
	  Bp = B;

Step5: /* Initialize and branch on signs. */
       if (AVAIL == NIL)
	  GC();
       C = AVAIL;
       Cpp = C;       
       if (s != t)
	  goto Step8;
       else
	  if (s < 0)
	     goto Step7;

Step6: /* A and B both positive, add with carry. */
       cp = 0;
       do {
	  Cp = Cpp;
	  if (Ap != NIL) {
	     a = FIRST(Ap);
	     Ap = RED(Ap); }
	  else
	     a = 0;
	  if (Bp != NIL) {
	     b = FIRST(Bp);
	     Bp = RED(Bp); }
	  else
	     b = 0;
	  c = a + b;
	  c = c + cp;
	  if (c >= BETA) {
	     c = c - BETA;
	     cp = 1; }
	  else
	     cp = 0;
	  SFIRST(Cp,c);
	  Cpp = RED(Cp); 
	  if (Cpp == NIL) {
	     AVAIL = NIL;
	     GC();
	     Cpp = AVAIL; 
	     SRED(Cp,Cpp); } }
       while (cp != 0 || (Ap != NIL && Bp != NIL));
       if (Ap == NIL)
	  Ap = Bp;
       AVAIL = Cpp;
       SRED(Cp,Ap);
       goto Return;

Step7: /* A and B both negative, add with carry. */
       cp = 0;
       do {
	  Cp = Cpp;
	  if (Ap != NIL) {
	     a = FIRST(Ap);
	     Ap = RED(Ap); }
	  else
	     a = 0;
	  if (Bp != NIL) {
	     b = FIRST(Bp);
	     Bp = RED(Bp); }
	  else
	     b = 0;
	  c = a + b;
	  c = c + cp;
	  if (c <= -BETA) {
	     c = c + BETA;
	     cp = -1; }
	  else
	     cp = 0;
	  SFIRST(Cp,c);
	  Cpp = RED(Cp); 
	  if (Cpp == NIL) {
	     AVAIL = NIL;
	     GC();
	     Cpp = AVAIL; 
	     SRED(Cp,Cpp); } }
       while (cp != 0 || (Ap != NIL && Bp != NIL));
       if (Ap == NIL)
	  Ap = Bp;
       AVAIL = Cpp;
       SRED(Cp,Ap);
       goto Return;

Step8: /* Opposite signs, add without carry. */
       u = 0;
       do {
	  Cp = Cpp;
	  a = FIRST(Ap);
	  Ap = RED(Ap); 
	  b = FIRST(Bp);
	  Bp = RED(Bp); 
	  c = a + b;
	  if (c != 0)
	     u = c;
	  SFIRST(Cp,c);
	  Cpp = RED(Cp); 
	  if (Cpp == NIL) {
	     AVAIL = NIL;
	     GC();
	     Cpp = AVAIL; 
	     SRED(Cp,Cpp); } }
       while (Ap != NIL && Bp != NIL);
       if (Ap == NIL) {
	  Ap = Bp;
	  s = t; }

Step9: /* Sum zero. */
       if (u == 0 && Ap == NIL) {
	  AVAIL = C;
	  C = 0;
	  goto Return; }

Step10: /* Continue with longer input. */
       if (u == 0 || (Ap != NIL && s != SIGN(u))) {
	  do {
	     Cp = Cpp;
	     a = FIRST(Ap);
	     Ap = RED(Ap); 
	     SFIRST(Cp,a);
	     Cpp = RED(Cp); 
	     if (Cpp == NIL) {
		AVAIL = NIL;
		GC();
		Cpp = AVAIL; 
		SRED(Cp,Cpp); } }
	  while (a == 0);       
	  u = a; }
       AVAIL = Cpp;
       SRED(Cp,NIL);

Step11: /* Normalize the sum. */
       Cb = C;
       cp = 0;
       if (u < 0)
	  do {
	     c = FIRST(Cb);
	     c = c + cp;
	     if (c > 0) {
		c = c - BETA;
		cp = 1; }
	     else
		cp = 0;
	     if (c != 0)
		Cs = Cb;
	     SFIRST(Cb,c);
	     Cb = RED(Cb); }
	  while (Cb != NIL);
       else
	  do {
	     c = FIRST(Cb);
	     c = c + cp;
	     if (c < 0) {
		c = c + BETA;
		cp = -1; }
	     else
		cp = 0;
	     if (c != 0)
		Cs = Cb;
	     SFIRST(Cb,c);
	     Cb = RED(Cb); }
	  while (Cb != NIL);

Step12: /* Concatenate or delete leading zeros. */
       if (Ap == NIL)
	  SRED(Cs,NIL);
       else
	  SRED(Cp,Ap);
       if (RED(C) == NIL)
	  C = FIRST(C);

Return: /* Prepare for return. */
       return(C);
}
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
/*======================================================================
                      C <- ISUM(A,B)
d9 1
a9 1
Outputs
d11 1
a11 1
======================================================================*/
d17 1
a17 2
       Word Ap,Bp,C,Cp,Cpp,Cs,a,b,c,cp,s,t,u;
       /* hide Ap,Bp,Cp,Cpp,Cs,a,b,c,cp,s,t,u; */
d20 6
a25 10
       if (A == 0)
         {
         C = B;
         goto Return;
         }
       if (B == 0)
         {
         C = A;
         goto Return;
         }
d28 10
a37 12
       if (A < BETA && B < BETA)
         {
         c = A + B;
         if (c >= BETA)
           C = LIST2(c - BETA,1);
         else
           if (c <= -BETA)
             C = LIST2(c + BETA,-1);
           else
             C = c;
         goto Return;
         }
a41 1
       C = NIL;
d45 1
a45 1
         Ap = LIST1(A);
d47 1
a47 1
         Ap = A;
d49 1
a49 1
         Bp = LIST1(B);
d51 1
a51 1
         Bp = B;
d53 5
a57 1
Step5: /* Branch on signs. */
d59 4
a62 1
         goto Step8;
d64 1
a64 1
Step6: /* Same signs, add with carry. */
d66 26
a91 26
       do
         {
         if (Ap != NIL)
           ADV(Ap,&a,&Ap);
         else
           a = 0;
         if (Bp != NIL)
           ADV(Bp,&b,&Bp);
         else
           b = 0;
         c = a + b;
         c = c + cp;
         cp = 0;
         if (c >= BETA)
           {
           c = c - BETA;
           cp = 1;
           }
         else
           if (c <= -BETA)
             {
             c = c + BETA;
             cp = -1;
             }
         C = COMP(c,C);
         }
d94 4
a97 1
         Ap = Bp;
d99 33
a131 4
Step7: /* Invert and concatenate. */
       Cp = INV(C);
       SRED(C,Ap);
       C = Cp;
d136 16
a151 9
       do
         {
         ADV(Ap,&a,&Ap);
         ADV(Bp,&b,&Bp);
         c = a + b;
         if (c != 0)
           u = c;
         C = COMP(c,C);
         }
d153 3
a155 5
       if (Ap == NIL)
         {
         Ap = Bp;
         s = t;
         }
d158 4
a161 5
       if (u == 0 && Ap == NIL)
         {
         C = 0;
         goto Return;
         }
d164 19
a182 12
       if (u == 0 || (Ap != NIL && s != SIGN(u)))
         do
           {
           ADV(Ap,&a,&Ap);
           C = COMP(a,C);
           u = a;
           }
         while (a == 0);

Step11: /* Invert and normalize. */
       Cp = INV(C);
       Cpp = Cp;
d184 28
a211 22
       do
         {
         c = FIRST(Cpp);
         c = c + cp;
         cp = 0;
         if (u > 0 && c < 0)
           {
           c = c + BETA;
           cp = -1;
           }
         else
           if (u < 0 && c > 0)
             {
             c = c - BETA;
             cp = 1;
             }
         if (c != 0)
           Cs = Cpp;
         SFIRST(Cpp,c);
         Cpp = RED(Cpp);
         }
       while (Cpp != NIL);
d215 1
a215 1
         SRED(Cs,NIL);
d217 1
a217 2
         SRED(C,Ap);
       C = Cp;
d219 1
a219 1
         C = FIRST(C);
@
