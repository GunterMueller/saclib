head	1.3;
access;
symbols;
locks
	saclib:1.3; strict;
comment	@ * @;


1.3
date	95.07.14.12.05.09;	author Mark;	state embe;
branches;
next	1.2;

1.2
date	94.01.09.17.03.28;	author George;	state algo;
branches;
next	1.1;

1.1
date	94.01.09.17.02.51;	author saclib;	state init;
branches;
next	;


desc
@Integer selfridge primality test.
@


1.3
log
@Changed SMPRM to SPRIME.
@
text
@/*===========================================================================
		       s <- ISPT(m,mp,F)

Integer selfridge primality test.  

Inputs
  m  : in Z. m >=3. 
  mp : m - 1.
  F  : a list (q_1,q_2,...,q_k), q_1 <= q_2 <= ... <= q_k, 
       of the prime factors of mp, 
       with mp equal to the product of the q_i.

Outputs
  s  : An attempt is made to find a root of unity modulo m of order m-1.
       If the existence of such a root is discovered then m is prime and
       s = 1.  If it is discovered that no such root exists then m is not
       a prime and s = -1.  Otherwise the primality of m remains uncertain
       and s = 0.
===========================================================================*/
#include "saclib.h"

Word ISPT(m,mp,F)
       Word m,mp,F;
{
       Word Fp,Pp,a,b,mpp,p,p1,q,q1,s;

Step1: /* Initialize outer loop. */
       Fp = F;
       q1 = 1;
       p1 = 1;

Step2: /* Get next divisor of m', if any. */
       do {
	  if (Fp == NIL) {
	     s = 1;
	     goto Return; }
	  ADV(Fp,&q,&Fp); }
       while (ICOMP(q,q1) <= 0);
       q1 = q;

Step3: /* Try successive small primes. */
       Pp = SPRIME;
       do {
	  if (Pp == NIL) {
	     s = 0;
	     goto Return; }
	  ADV(Pp,&p,&Pp);
	  if (p > p1) {
	     p1 = p;
	     a = MIEXP(m,p,mp);
	     if (a != 1) {
		s = -1;
		goto Return; } }
	  mpp = IEQ(mp,q);
	  b = MIEXP(m,p,mpp); }
       while (b == 1);

Step4: /* Return for next divisor. */
       goto Step2;

Return: /* Prepare for return. */
       return(s);
}
@


1.2
log
@Calls to IQ have been replaced by calls to IEQ.
@
text
@d2 1
a2 1
			     s <- ISPT(m,mp,F)
d42 1
a42 1
       Pp = SMPRM;
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
/*======================================================================
                      s <- ISPT(m,mp,F)
d14 6
a19 5
  s  : An attempt is made to find a root of unity modulo m of order m-1.  
       If the existence of such a root is discovered then m is prime and s=1.  
       If it is discovered that no such root exists then m is not a prime and s=-1.  
       Otherwise the primality of m remains uncertain and s=0.
======================================================================*/
a25 1
       /* hide Fp,Pp,p,p1,s; */
d33 6
a38 10
       do
         {
         if (Fp == NIL)
           {
           s = 1;
           goto Return;
           }
         ADV(Fp,&q,&Fp);
         }
       while (!(ICOMP(q,q1) > 0));
d43 14
a56 22
       do
         {
         if (Pp == NIL)
           {
           s = 0;
           goto Return;
           }
         ADV(Pp,&p,&Pp);
         if (p > p1)
           {
           p1 = p;
           a = MIEXP(m,p,mp);
           if (a != 1)
             {
             s = -1;
             goto Return;
             }
           }
         mpp = IQ(mp,q);
         b = MIEXP(m,p,mpp);
         }
       while (!(b != 1));
@
